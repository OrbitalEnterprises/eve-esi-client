/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.6.dev12
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package enterprises.orbital.eve.esi.client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;

import enterprises.orbital.eve.esi.client.invoker.ApiCallback;
import enterprises.orbital.eve.esi.client.invoker.ApiClient;
import enterprises.orbital.eve.esi.client.invoker.ApiException;
import enterprises.orbital.eve.esi.client.invoker.ApiResponse;
import enterprises.orbital.eve.esi.client.invoker.Configuration;
import enterprises.orbital.eve.esi.client.invoker.Pair;
import enterprises.orbital.eve.esi.client.invoker.ProgressRequestBody;
import enterprises.orbital.eve.esi.client.invoker.ProgressResponseBody;
import enterprises.orbital.eve.esi.client.model.GetInsurancePrices200Ok;

public class InsuranceApi {
  private ApiClient apiClient;

  public InsuranceApi() {
    this(Configuration.getDefaultApiClient());
  }

  public InsuranceApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(
                           ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /* Build call for getInsurancePrices */
  private com.squareup.okhttp.Call getInsurancePricesCall(
                                                          String acceptLanguage,
                                                          String datasource,
                                                          final ProgressResponseBody.ProgressListener progressListener,
                                                          final ProgressRequestBody.ProgressRequestListener progressRequestListener)
    throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/insurance/prices/".replaceAll("\\{format\\}", "json");

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    if (datasource != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "datasource", datasource));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    if (acceptLanguage != null) localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(
                                                      com.squareup.okhttp.Interceptor.Chain chain)
          throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
        }
      });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                               progressRequestListener);
  }

  /**
   * List insurance levels Return available insurance levels for all ship types --- Alternate route: &#x60;/v1/insurance/prices/&#x60; Alternate route:
   * &#x60;/legacy/insurance/prices/&#x60; Alternate route: &#x60;/dev/insurance/prices/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param acceptLanguage
   *          Language to use in the response (optional, default to en)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return List&lt;GetInsurancePrices200Ok&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public List<GetInsurancePrices200Ok> getInsurancePrices(
                                                          String acceptLanguage,
                                                          String datasource)
    throws ApiException {
    ApiResponse<List<GetInsurancePrices200Ok>> resp = getInsurancePricesWithHttpInfo(acceptLanguage, datasource);
    return resp.getData();
  }

  /**
   * List insurance levels Return available insurance levels for all ship types --- Alternate route: &#x60;/v1/insurance/prices/&#x60; Alternate route:
   * &#x60;/legacy/insurance/prices/&#x60; Alternate route: &#x60;/dev/insurance/prices/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param acceptLanguage
   *          Language to use in the response (optional, default to en)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return ApiResponse&lt;List&lt;GetInsurancePrices200Ok&gt;&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<List<GetInsurancePrices200Ok>> getInsurancePricesWithHttpInfo(
                                                                                   String acceptLanguage,
                                                                                   String datasource)
    throws ApiException {
    com.squareup.okhttp.Call call = getInsurancePricesCall(acceptLanguage, datasource, null, null);
    Type localVarReturnType = new TypeToken<List<GetInsurancePrices200Ok>>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * List insurance levels (asynchronously) Return available insurance levels for all ship types --- Alternate route: &#x60;/v1/insurance/prices/&#x60;
   * Alternate route: &#x60;/legacy/insurance/prices/&#x60; Alternate route: &#x60;/dev/insurance/prices/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param acceptLanguage
   *          Language to use in the response (optional, default to en)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @param callback
   *          The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException
   *           If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getInsurancePricesAsync(
                                                          String acceptLanguage,
                                                          String datasource,
                                                          final ApiCallback<List<GetInsurancePrices200Ok>> callback)
    throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(
                           long bytesRead,
                           long contentLength,
                           boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(
                                      long bytesWritten,
                                      long contentLength,
                                      boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getInsurancePricesCall(acceptLanguage, datasource, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<List<GetInsurancePrices200Ok>>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
}
