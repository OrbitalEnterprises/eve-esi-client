/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.6.dev12
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package enterprises.orbital.eve.esi.client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;

import enterprises.orbital.eve.esi.client.invoker.ApiCallback;
import enterprises.orbital.eve.esi.client.invoker.ApiClient;
import enterprises.orbital.eve.esi.client.invoker.ApiException;
import enterprises.orbital.eve.esi.client.invoker.ApiResponse;
import enterprises.orbital.eve.esi.client.invoker.Configuration;
import enterprises.orbital.eve.esi.client.invoker.Pair;
import enterprises.orbital.eve.esi.client.invoker.ProgressRequestBody;
import enterprises.orbital.eve.esi.client.invoker.ProgressResponseBody;
import enterprises.orbital.eve.esi.client.model.GetCharactersCharacterIdMail200Ok;
import enterprises.orbital.eve.esi.client.model.GetCharactersCharacterIdMailLabelsOk;
import enterprises.orbital.eve.esi.client.model.GetCharactersCharacterIdMailLists200Ok;
import enterprises.orbital.eve.esi.client.model.GetCharactersCharacterIdMailMailIdOk;
import enterprises.orbital.eve.esi.client.model.PostCharactersCharacterIdMailLabelsLabel;
import enterprises.orbital.eve.esi.client.model.PostCharactersCharacterIdMailMail;
import enterprises.orbital.eve.esi.client.model.PutCharactersCharacterIdMailMailIdContents;

public class MailApi {
  private ApiClient apiClient;

  public MailApi() {
    this(Configuration.getDefaultApiClient());
  }

  public MailApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(
                           ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /* Build call for deleteCharactersCharacterIdMailLabelsLabelId */
  private com.squareup.okhttp.Call deleteCharactersCharacterIdMailLabelsLabelIdCall(
                                                                                    Integer characterId,
                                                                                    Integer labelId,
                                                                                    String datasource,
                                                                                    final ProgressResponseBody.ProgressListener progressListener,
                                                                                    final ProgressRequestBody.ProgressRequestListener progressRequestListener)
    throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'characterId' is set
    if (characterId == null) { throw new ApiException(
        "Missing the required parameter 'characterId' when calling deleteCharactersCharacterIdMailLabelsLabelId(Async)"); }

    // verify the required parameter 'labelId' is set
    if (labelId == null) { throw new ApiException(
        "Missing the required parameter 'labelId' when calling deleteCharactersCharacterIdMailLabelsLabelId(Async)"); }

    // create path and map variables
    String localVarPath = "/characters/{character_id}/mail/labels/{label_id}/".replaceAll("\\{format\\}", "json")
        .replaceAll("\\{" + "character_id" + "\\}", apiClient.escapeString(characterId.toString()))
        .replaceAll("\\{" + "label_id" + "\\}", apiClient.escapeString(labelId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    if (datasource != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "datasource", datasource));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(
                                                      com.squareup.okhttp.Interceptor.Chain chain)
          throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
        }
      });
    }

    String[] localVarAuthNames = new String[] {
        "evesso"
    };
    return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                               progressRequestListener);
  }

  /**
   * Delete a mail label Delete a mail label --- Alternate route: &#x60;/v1/characters/{character_id}/mail/labels/{label_id}/&#x60; Alternate route:
   * &#x60;/legacy/characters/{character_id}/mail/labels/{label_id}/&#x60; Alternate route: &#x60;/dev/characters/{character_id}/mail/labels/{label_id}/&#x60;
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param labelId
   *          An EVE label id (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public void deleteCharactersCharacterIdMailLabelsLabelId(
                                                           Integer characterId,
                                                           Integer labelId,
                                                           String datasource)
    throws ApiException {
    deleteCharactersCharacterIdMailLabelsLabelIdWithHttpInfo(characterId, labelId, datasource);
  }

  /**
   * Delete a mail label Delete a mail label --- Alternate route: &#x60;/v1/characters/{character_id}/mail/labels/{label_id}/&#x60; Alternate route:
   * &#x60;/legacy/characters/{character_id}/mail/labels/{label_id}/&#x60; Alternate route: &#x60;/dev/characters/{character_id}/mail/labels/{label_id}/&#x60;
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param labelId
   *          An EVE label id (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<Void> deleteCharactersCharacterIdMailLabelsLabelIdWithHttpInfo(
                                                                                    Integer characterId,
                                                                                    Integer labelId,
                                                                                    String datasource)
    throws ApiException {
    com.squareup.okhttp.Call call = deleteCharactersCharacterIdMailLabelsLabelIdCall(characterId, labelId, datasource, null, null);
    return apiClient.execute(call);
  }

  /**
   * Delete a mail label (asynchronously) Delete a mail label --- Alternate route: &#x60;/v1/characters/{character_id}/mail/labels/{label_id}/&#x60; Alternate
   * route: &#x60;/legacy/characters/{character_id}/mail/labels/{label_id}/&#x60; Alternate route:
   * &#x60;/dev/characters/{character_id}/mail/labels/{label_id}/&#x60;
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param labelId
   *          An EVE label id (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @param callback
   *          The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException
   *           If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call deleteCharactersCharacterIdMailLabelsLabelIdAsync(
                                                                                    Integer characterId,
                                                                                    Integer labelId,
                                                                                    String datasource,
                                                                                    final ApiCallback<Void> callback)
    throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(
                           long bytesRead,
                           long contentLength,
                           boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(
                                      long bytesWritten,
                                      long contentLength,
                                      boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = deleteCharactersCharacterIdMailLabelsLabelIdCall(characterId, labelId, datasource, progressListener,
                                                                                     progressRequestListener);
    apiClient.executeAsync(call, callback);
    return call;
  }

  /* Build call for deleteCharactersCharacterIdMailMailId */
  private com.squareup.okhttp.Call deleteCharactersCharacterIdMailMailIdCall(
                                                                             Integer characterId,
                                                                             Integer mailId,
                                                                             String datasource,
                                                                             final ProgressResponseBody.ProgressListener progressListener,
                                                                             final ProgressRequestBody.ProgressRequestListener progressRequestListener)
    throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'characterId' is set
    if (characterId == null) { throw new ApiException(
        "Missing the required parameter 'characterId' when calling deleteCharactersCharacterIdMailMailId(Async)"); }

    // verify the required parameter 'mailId' is set
    if (mailId == null) { throw new ApiException("Missing the required parameter 'mailId' when calling deleteCharactersCharacterIdMailMailId(Async)"); }

    // create path and map variables
    String localVarPath = "/characters/{character_id}/mail/{mail_id}/".replaceAll("\\{format\\}", "json")
        .replaceAll("\\{" + "character_id" + "\\}", apiClient.escapeString(characterId.toString()))
        .replaceAll("\\{" + "mail_id" + "\\}", apiClient.escapeString(mailId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    if (datasource != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "datasource", datasource));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(
                                                      com.squareup.okhttp.Interceptor.Chain chain)
          throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
        }
      });
    }

    String[] localVarAuthNames = new String[] {
        "evesso"
    };
    return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                               progressRequestListener);
  }

  /**
   * Delete a mail Delete a mail --- Alternate route: &#x60;/v1/characters/{character_id}/mail/{mail_id}/&#x60; Alternate route:
   * &#x60;/legacy/characters/{character_id}/mail/{mail_id}/&#x60; Alternate route: &#x60;/dev/characters/{character_id}/mail/{mail_id}/&#x60;
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param mailId
   *          An EVE mail ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public void deleteCharactersCharacterIdMailMailId(
                                                    Integer characterId,
                                                    Integer mailId,
                                                    String datasource)
    throws ApiException {
    deleteCharactersCharacterIdMailMailIdWithHttpInfo(characterId, mailId, datasource);
  }

  /**
   * Delete a mail Delete a mail --- Alternate route: &#x60;/v1/characters/{character_id}/mail/{mail_id}/&#x60; Alternate route:
   * &#x60;/legacy/characters/{character_id}/mail/{mail_id}/&#x60; Alternate route: &#x60;/dev/characters/{character_id}/mail/{mail_id}/&#x60;
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param mailId
   *          An EVE mail ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<Void> deleteCharactersCharacterIdMailMailIdWithHttpInfo(
                                                                             Integer characterId,
                                                                             Integer mailId,
                                                                             String datasource)
    throws ApiException {
    com.squareup.okhttp.Call call = deleteCharactersCharacterIdMailMailIdCall(characterId, mailId, datasource, null, null);
    return apiClient.execute(call);
  }

  /**
   * Delete a mail (asynchronously) Delete a mail --- Alternate route: &#x60;/v1/characters/{character_id}/mail/{mail_id}/&#x60; Alternate route:
   * &#x60;/legacy/characters/{character_id}/mail/{mail_id}/&#x60; Alternate route: &#x60;/dev/characters/{character_id}/mail/{mail_id}/&#x60;
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param mailId
   *          An EVE mail ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @param callback
   *          The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException
   *           If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call deleteCharactersCharacterIdMailMailIdAsync(
                                                                             Integer characterId,
                                                                             Integer mailId,
                                                                             String datasource,
                                                                             final ApiCallback<Void> callback)
    throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(
                           long bytesRead,
                           long contentLength,
                           boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(
                                      long bytesWritten,
                                      long contentLength,
                                      boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = deleteCharactersCharacterIdMailMailIdCall(characterId, mailId, datasource, progressListener, progressRequestListener);
    apiClient.executeAsync(call, callback);
    return call;
  }

  /* Build call for getCharactersCharacterIdMail */
  private com.squareup.okhttp.Call getCharactersCharacterIdMailCall(
                                                                    Integer characterId,
                                                                    List<Long> labels,
                                                                    Integer lastMailId,
                                                                    String datasource,
                                                                    final ProgressResponseBody.ProgressListener progressListener,
                                                                    final ProgressRequestBody.ProgressRequestListener progressRequestListener)
    throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'characterId' is set
    if (characterId == null) { throw new ApiException("Missing the required parameter 'characterId' when calling getCharactersCharacterIdMail(Async)"); }

    // create path and map variables
    String localVarPath = "/characters/{character_id}/mail/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "character_id" + "\\}",
                                                                                                           apiClient.escapeString(characterId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    if (labels != null) localVarQueryParams.addAll(apiClient.parameterToPairs("csv", "labels", labels));
    if (lastMailId != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "last_mail_id", lastMailId));
    if (datasource != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "datasource", datasource));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(
                                                      com.squareup.okhttp.Interceptor.Chain chain)
          throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
        }
      });
    }

    String[] localVarAuthNames = new String[] {
        "evesso"
    };
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                               progressRequestListener);
  }

  /**
   * Return mail headers Return the 50 most recent mail headers belonging to the character that match the query criteria. Queries can be filtered by label, and
   * last_mail_id can be used to paginate backwards. --- Alternate route: &#x60;/v1/characters/{character_id}/mail/&#x60; Alternate route:
   * &#x60;/legacy/characters/{character_id}/mail/&#x60; Alternate route: &#x60;/dev/characters/{character_id}/mail/&#x60; --- This route is cached for up to 30
   * seconds
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param labels
   *          Fetch only mails that match one or more of the given labels (optional)
   * @param lastMailId
   *          List only mail with an ID lower than the given ID, if present (optional)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return List&lt;GetCharactersCharacterIdMail200Ok&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public List<GetCharactersCharacterIdMail200Ok> getCharactersCharacterIdMail(
                                                                              Integer characterId,
                                                                              List<Long> labels,
                                                                              Integer lastMailId,
                                                                              String datasource)
    throws ApiException {
    ApiResponse<List<GetCharactersCharacterIdMail200Ok>> resp = getCharactersCharacterIdMailWithHttpInfo(characterId, labels, lastMailId, datasource);
    return resp.getData();
  }

  /**
   * Return mail headers Return the 50 most recent mail headers belonging to the character that match the query criteria. Queries can be filtered by label, and
   * last_mail_id can be used to paginate backwards. --- Alternate route: &#x60;/v1/characters/{character_id}/mail/&#x60; Alternate route:
   * &#x60;/legacy/characters/{character_id}/mail/&#x60; Alternate route: &#x60;/dev/characters/{character_id}/mail/&#x60; --- This route is cached for up to 30
   * seconds
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param labels
   *          Fetch only mails that match one or more of the given labels (optional)
   * @param lastMailId
   *          List only mail with an ID lower than the given ID, if present (optional)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return ApiResponse&lt;List&lt;GetCharactersCharacterIdMail200Ok&gt;&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<List<GetCharactersCharacterIdMail200Ok>> getCharactersCharacterIdMailWithHttpInfo(
                                                                                                       Integer characterId,
                                                                                                       List<Long> labels,
                                                                                                       Integer lastMailId,
                                                                                                       String datasource)
    throws ApiException {
    com.squareup.okhttp.Call call = getCharactersCharacterIdMailCall(characterId, labels, lastMailId, datasource, null, null);
    Type localVarReturnType = new TypeToken<List<GetCharactersCharacterIdMail200Ok>>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Return mail headers (asynchronously) Return the 50 most recent mail headers belonging to the character that match the query criteria. Queries can be
   * filtered by label, and last_mail_id can be used to paginate backwards. --- Alternate route: &#x60;/v1/characters/{character_id}/mail/&#x60; Alternate
   * route: &#x60;/legacy/characters/{character_id}/mail/&#x60; Alternate route: &#x60;/dev/characters/{character_id}/mail/&#x60; --- This route is cached for
   * up to 30 seconds
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param labels
   *          Fetch only mails that match one or more of the given labels (optional)
   * @param lastMailId
   *          List only mail with an ID lower than the given ID, if present (optional)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @param callback
   *          The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException
   *           If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getCharactersCharacterIdMailAsync(
                                                                    Integer characterId,
                                                                    List<Long> labels,
                                                                    Integer lastMailId,
                                                                    String datasource,
                                                                    final ApiCallback<List<GetCharactersCharacterIdMail200Ok>> callback)
    throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(
                           long bytesRead,
                           long contentLength,
                           boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(
                                      long bytesWritten,
                                      long contentLength,
                                      boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getCharactersCharacterIdMailCall(characterId, labels, lastMailId, datasource, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<List<GetCharactersCharacterIdMail200Ok>>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /* Build call for getCharactersCharacterIdMailLabels */
  private com.squareup.okhttp.Call getCharactersCharacterIdMailLabelsCall(
                                                                          Integer characterId,
                                                                          String datasource,
                                                                          final ProgressResponseBody.ProgressListener progressListener,
                                                                          final ProgressRequestBody.ProgressRequestListener progressRequestListener)
    throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'characterId' is set
    if (characterId == null) { throw new ApiException("Missing the required parameter 'characterId' when calling getCharactersCharacterIdMailLabels(Async)"); }

    // create path and map variables
    String localVarPath = "/characters/{character_id}/mail/labels/".replaceAll("\\{format\\}", "json")
        .replaceAll("\\{" + "character_id" + "\\}", apiClient.escapeString(characterId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    if (datasource != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "datasource", datasource));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(
                                                      com.squareup.okhttp.Interceptor.Chain chain)
          throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
        }
      });
    }

    String[] localVarAuthNames = new String[] {
        "evesso"
    };
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                               progressRequestListener);
  }

  /**
   * Get mail labels and unread counts Return a list of the users mail labels, unread counts for each label and a total unread count. --- Alternate route:
   * &#x60;/v3/characters/{character_id}/mail/labels/&#x60; Alternate route: &#x60;/dev/characters/{character_id}/mail/labels/&#x60; --- This route is cached
   * for up to 30 seconds
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return GetCharactersCharacterIdMailLabelsOk
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public GetCharactersCharacterIdMailLabelsOk getCharactersCharacterIdMailLabels(
                                                                                 Integer characterId,
                                                                                 String datasource)
    throws ApiException {
    ApiResponse<GetCharactersCharacterIdMailLabelsOk> resp = getCharactersCharacterIdMailLabelsWithHttpInfo(characterId, datasource);
    return resp.getData();
  }

  /**
   * Get mail labels and unread counts Return a list of the users mail labels, unread counts for each label and a total unread count. --- Alternate route:
   * &#x60;/v3/characters/{character_id}/mail/labels/&#x60; Alternate route: &#x60;/dev/characters/{character_id}/mail/labels/&#x60; --- This route is cached
   * for up to 30 seconds
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return ApiResponse&lt;GetCharactersCharacterIdMailLabelsOk&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<GetCharactersCharacterIdMailLabelsOk> getCharactersCharacterIdMailLabelsWithHttpInfo(
                                                                                                          Integer characterId,
                                                                                                          String datasource)
    throws ApiException {
    com.squareup.okhttp.Call call = getCharactersCharacterIdMailLabelsCall(characterId, datasource, null, null);
    Type localVarReturnType = new TypeToken<GetCharactersCharacterIdMailLabelsOk>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get mail labels and unread counts (asynchronously) Return a list of the users mail labels, unread counts for each label and a total unread count. ---
   * Alternate route: &#x60;/v3/characters/{character_id}/mail/labels/&#x60; Alternate route: &#x60;/dev/characters/{character_id}/mail/labels/&#x60; --- This
   * route is cached for up to 30 seconds
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @param callback
   *          The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException
   *           If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getCharactersCharacterIdMailLabelsAsync(
                                                                          Integer characterId,
                                                                          String datasource,
                                                                          final ApiCallback<GetCharactersCharacterIdMailLabelsOk> callback)
    throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(
                           long bytesRead,
                           long contentLength,
                           boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(
                                      long bytesWritten,
                                      long contentLength,
                                      boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getCharactersCharacterIdMailLabelsCall(characterId, datasource, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<GetCharactersCharacterIdMailLabelsOk>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /* Build call for getCharactersCharacterIdMailLists */
  private com.squareup.okhttp.Call getCharactersCharacterIdMailListsCall(
                                                                         Integer characterId,
                                                                         String datasource,
                                                                         final ProgressResponseBody.ProgressListener progressListener,
                                                                         final ProgressRequestBody.ProgressRequestListener progressRequestListener)
    throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'characterId' is set
    if (characterId == null) { throw new ApiException("Missing the required parameter 'characterId' when calling getCharactersCharacterIdMailLists(Async)"); }

    // create path and map variables
    String localVarPath = "/characters/{character_id}/mail/lists/".replaceAll("\\{format\\}", "json")
        .replaceAll("\\{" + "character_id" + "\\}", apiClient.escapeString(characterId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    if (datasource != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "datasource", datasource));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(
                                                      com.squareup.okhttp.Interceptor.Chain chain)
          throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
        }
      });
    }

    String[] localVarAuthNames = new String[] {
        "evesso"
    };
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                               progressRequestListener);
  }

  /**
   * Return mailing list subscriptions Return all mailing lists that the character is subscribed to --- Alternate route:
   * &#x60;/v1/characters/{character_id}/mail/lists/&#x60; Alternate route: &#x60;/legacy/characters/{character_id}/mail/lists/&#x60; Alternate route:
   * &#x60;/dev/characters/{character_id}/mail/lists/&#x60; --- This route is cached for up to 120 seconds
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return List&lt;GetCharactersCharacterIdMailLists200Ok&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public List<GetCharactersCharacterIdMailLists200Ok> getCharactersCharacterIdMailLists(
                                                                                        Integer characterId,
                                                                                        String datasource)
    throws ApiException {
    ApiResponse<List<GetCharactersCharacterIdMailLists200Ok>> resp = getCharactersCharacterIdMailListsWithHttpInfo(characterId, datasource);
    return resp.getData();
  }

  /**
   * Return mailing list subscriptions Return all mailing lists that the character is subscribed to --- Alternate route:
   * &#x60;/v1/characters/{character_id}/mail/lists/&#x60; Alternate route: &#x60;/legacy/characters/{character_id}/mail/lists/&#x60; Alternate route:
   * &#x60;/dev/characters/{character_id}/mail/lists/&#x60; --- This route is cached for up to 120 seconds
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return ApiResponse&lt;List&lt;GetCharactersCharacterIdMailLists200Ok&gt;&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<List<GetCharactersCharacterIdMailLists200Ok>> getCharactersCharacterIdMailListsWithHttpInfo(
                                                                                                                 Integer characterId,
                                                                                                                 String datasource)
    throws ApiException {
    com.squareup.okhttp.Call call = getCharactersCharacterIdMailListsCall(characterId, datasource, null, null);
    Type localVarReturnType = new TypeToken<List<GetCharactersCharacterIdMailLists200Ok>>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Return mailing list subscriptions (asynchronously) Return all mailing lists that the character is subscribed to --- Alternate route:
   * &#x60;/v1/characters/{character_id}/mail/lists/&#x60; Alternate route: &#x60;/legacy/characters/{character_id}/mail/lists/&#x60; Alternate route:
   * &#x60;/dev/characters/{character_id}/mail/lists/&#x60; --- This route is cached for up to 120 seconds
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @param callback
   *          The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException
   *           If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getCharactersCharacterIdMailListsAsync(
                                                                         Integer characterId,
                                                                         String datasource,
                                                                         final ApiCallback<List<GetCharactersCharacterIdMailLists200Ok>> callback)
    throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(
                           long bytesRead,
                           long contentLength,
                           boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(
                                      long bytesWritten,
                                      long contentLength,
                                      boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getCharactersCharacterIdMailListsCall(characterId, datasource, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<List<GetCharactersCharacterIdMailLists200Ok>>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /* Build call for getCharactersCharacterIdMailMailId */
  private com.squareup.okhttp.Call getCharactersCharacterIdMailMailIdCall(
                                                                          Integer characterId,
                                                                          Integer mailId,
                                                                          String datasource,
                                                                          final ProgressResponseBody.ProgressListener progressListener,
                                                                          final ProgressRequestBody.ProgressRequestListener progressRequestListener)
    throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'characterId' is set
    if (characterId == null) { throw new ApiException("Missing the required parameter 'characterId' when calling getCharactersCharacterIdMailMailId(Async)"); }

    // verify the required parameter 'mailId' is set
    if (mailId == null) { throw new ApiException("Missing the required parameter 'mailId' when calling getCharactersCharacterIdMailMailId(Async)"); }

    // create path and map variables
    String localVarPath = "/characters/{character_id}/mail/{mail_id}/".replaceAll("\\{format\\}", "json")
        .replaceAll("\\{" + "character_id" + "\\}", apiClient.escapeString(characterId.toString()))
        .replaceAll("\\{" + "mail_id" + "\\}", apiClient.escapeString(mailId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    if (datasource != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "datasource", datasource));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(
                                                      com.squareup.okhttp.Interceptor.Chain chain)
          throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
        }
      });
    }

    String[] localVarAuthNames = new String[] {
        "evesso"
    };
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                               progressRequestListener);
  }

  /**
   * Return a mail Return the contents of an EVE mail --- Alternate route: &#x60;/v1/characters/{character_id}/mail/{mail_id}/&#x60; Alternate route:
   * &#x60;/legacy/characters/{character_id}/mail/{mail_id}/&#x60; Alternate route: &#x60;/dev/characters/{character_id}/mail/{mail_id}/&#x60; --- This route is
   * cached for up to 30 seconds
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param mailId
   *          An EVE mail ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return GetCharactersCharacterIdMailMailIdOk
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public GetCharactersCharacterIdMailMailIdOk getCharactersCharacterIdMailMailId(
                                                                                 Integer characterId,
                                                                                 Integer mailId,
                                                                                 String datasource)
    throws ApiException {
    ApiResponse<GetCharactersCharacterIdMailMailIdOk> resp = getCharactersCharacterIdMailMailIdWithHttpInfo(characterId, mailId, datasource);
    return resp.getData();
  }

  /**
   * Return a mail Return the contents of an EVE mail --- Alternate route: &#x60;/v1/characters/{character_id}/mail/{mail_id}/&#x60; Alternate route:
   * &#x60;/legacy/characters/{character_id}/mail/{mail_id}/&#x60; Alternate route: &#x60;/dev/characters/{character_id}/mail/{mail_id}/&#x60; --- This route is
   * cached for up to 30 seconds
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param mailId
   *          An EVE mail ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return ApiResponse&lt;GetCharactersCharacterIdMailMailIdOk&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<GetCharactersCharacterIdMailMailIdOk> getCharactersCharacterIdMailMailIdWithHttpInfo(
                                                                                                          Integer characterId,
                                                                                                          Integer mailId,
                                                                                                          String datasource)
    throws ApiException {
    com.squareup.okhttp.Call call = getCharactersCharacterIdMailMailIdCall(characterId, mailId, datasource, null, null);
    Type localVarReturnType = new TypeToken<GetCharactersCharacterIdMailMailIdOk>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Return a mail (asynchronously) Return the contents of an EVE mail --- Alternate route: &#x60;/v1/characters/{character_id}/mail/{mail_id}/&#x60; Alternate
   * route: &#x60;/legacy/characters/{character_id}/mail/{mail_id}/&#x60; Alternate route: &#x60;/dev/characters/{character_id}/mail/{mail_id}/&#x60; --- This
   * route is cached for up to 30 seconds
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param mailId
   *          An EVE mail ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @param callback
   *          The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException
   *           If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getCharactersCharacterIdMailMailIdAsync(
                                                                          Integer characterId,
                                                                          Integer mailId,
                                                                          String datasource,
                                                                          final ApiCallback<GetCharactersCharacterIdMailMailIdOk> callback)
    throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(
                           long bytesRead,
                           long contentLength,
                           boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(
                                      long bytesWritten,
                                      long contentLength,
                                      boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getCharactersCharacterIdMailMailIdCall(characterId, mailId, datasource, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<GetCharactersCharacterIdMailMailIdOk>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /* Build call for postCharactersCharacterIdMail */
  private com.squareup.okhttp.Call postCharactersCharacterIdMailCall(
                                                                     Integer characterId,
                                                                     PostCharactersCharacterIdMailMail mail,
                                                                     String datasource,
                                                                     final ProgressResponseBody.ProgressListener progressListener,
                                                                     final ProgressRequestBody.ProgressRequestListener progressRequestListener)
    throws ApiException {
    Object localVarPostBody = mail;

    // verify the required parameter 'characterId' is set
    if (characterId == null) { throw new ApiException("Missing the required parameter 'characterId' when calling postCharactersCharacterIdMail(Async)"); }

    // verify the required parameter 'mail' is set
    if (mail == null) { throw new ApiException("Missing the required parameter 'mail' when calling postCharactersCharacterIdMail(Async)"); }

    // create path and map variables
    String localVarPath = "/characters/{character_id}/mail/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "character_id" + "\\}",
                                                                                                           apiClient.escapeString(characterId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    if (datasource != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "datasource", datasource));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(
                                                      com.squareup.okhttp.Interceptor.Chain chain)
          throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
        }
      });
    }

    String[] localVarAuthNames = new String[] {
        "evesso"
    };
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                               progressRequestListener);
  }

  /**
   * Send a new mail Create and send a new mail --- Alternate route: &#x60;/v1/characters/{character_id}/mail/&#x60; Alternate route:
   * &#x60;/legacy/characters/{character_id}/mail/&#x60; Alternate route: &#x60;/dev/characters/{character_id}/mail/&#x60;
   * 
   * @param characterId
   *          The sender&#39;s character ID (required)
   * @param mail
   *          The mail to send (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return Integer
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public Integer postCharactersCharacterIdMail(
                                               Integer characterId,
                                               PostCharactersCharacterIdMailMail mail,
                                               String datasource)
    throws ApiException {
    ApiResponse<Integer> resp = postCharactersCharacterIdMailWithHttpInfo(characterId, mail, datasource);
    return resp.getData();
  }

  /**
   * Send a new mail Create and send a new mail --- Alternate route: &#x60;/v1/characters/{character_id}/mail/&#x60; Alternate route:
   * &#x60;/legacy/characters/{character_id}/mail/&#x60; Alternate route: &#x60;/dev/characters/{character_id}/mail/&#x60;
   * 
   * @param characterId
   *          The sender&#39;s character ID (required)
   * @param mail
   *          The mail to send (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return ApiResponse&lt;Integer&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<Integer> postCharactersCharacterIdMailWithHttpInfo(
                                                                        Integer characterId,
                                                                        PostCharactersCharacterIdMailMail mail,
                                                                        String datasource)
    throws ApiException {
    com.squareup.okhttp.Call call = postCharactersCharacterIdMailCall(characterId, mail, datasource, null, null);
    Type localVarReturnType = new TypeToken<Integer>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Send a new mail (asynchronously) Create and send a new mail --- Alternate route: &#x60;/v1/characters/{character_id}/mail/&#x60; Alternate route:
   * &#x60;/legacy/characters/{character_id}/mail/&#x60; Alternate route: &#x60;/dev/characters/{character_id}/mail/&#x60;
   * 
   * @param characterId
   *          The sender&#39;s character ID (required)
   * @param mail
   *          The mail to send (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @param callback
   *          The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException
   *           If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call postCharactersCharacterIdMailAsync(
                                                                     Integer characterId,
                                                                     PostCharactersCharacterIdMailMail mail,
                                                                     String datasource,
                                                                     final ApiCallback<Integer> callback)
    throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(
                           long bytesRead,
                           long contentLength,
                           boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(
                                      long bytesWritten,
                                      long contentLength,
                                      boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = postCharactersCharacterIdMailCall(characterId, mail, datasource, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<Integer>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /* Build call for postCharactersCharacterIdMailLabels */
  private com.squareup.okhttp.Call postCharactersCharacterIdMailLabelsCall(
                                                                           Integer characterId,
                                                                           PostCharactersCharacterIdMailLabelsLabel label,
                                                                           String datasource,
                                                                           final ProgressResponseBody.ProgressListener progressListener,
                                                                           final ProgressRequestBody.ProgressRequestListener progressRequestListener)
    throws ApiException {
    Object localVarPostBody = label;

    // verify the required parameter 'characterId' is set
    if (characterId == null) { throw new ApiException("Missing the required parameter 'characterId' when calling postCharactersCharacterIdMailLabels(Async)"); }

    // create path and map variables
    String localVarPath = "/characters/{character_id}/mail/labels/".replaceAll("\\{format\\}", "json")
        .replaceAll("\\{" + "character_id" + "\\}", apiClient.escapeString(characterId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    if (datasource != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "datasource", datasource));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(
                                                      com.squareup.okhttp.Interceptor.Chain chain)
          throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
        }
      });
    }

    String[] localVarAuthNames = new String[] {
        "evesso"
    };
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                               progressRequestListener);
  }

  /**
   * Create a mail label Create a mail label --- Alternate route: &#x60;/v2/characters/{character_id}/mail/labels/&#x60; Alternate route:
   * &#x60;/legacy/characters/{character_id}/mail/labels/&#x60; Alternate route: &#x60;/dev/characters/{character_id}/mail/labels/&#x60;
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param label
   *          Label to create (optional)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return Long
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public Long postCharactersCharacterIdMailLabels(
                                                  Integer characterId,
                                                  PostCharactersCharacterIdMailLabelsLabel label,
                                                  String datasource)
    throws ApiException {
    ApiResponse<Long> resp = postCharactersCharacterIdMailLabelsWithHttpInfo(characterId, label, datasource);
    return resp.getData();
  }

  /**
   * Create a mail label Create a mail label --- Alternate route: &#x60;/v2/characters/{character_id}/mail/labels/&#x60; Alternate route:
   * &#x60;/legacy/characters/{character_id}/mail/labels/&#x60; Alternate route: &#x60;/dev/characters/{character_id}/mail/labels/&#x60;
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param label
   *          Label to create (optional)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return ApiResponse&lt;Long&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<Long> postCharactersCharacterIdMailLabelsWithHttpInfo(
                                                                           Integer characterId,
                                                                           PostCharactersCharacterIdMailLabelsLabel label,
                                                                           String datasource)
    throws ApiException {
    com.squareup.okhttp.Call call = postCharactersCharacterIdMailLabelsCall(characterId, label, datasource, null, null);
    Type localVarReturnType = new TypeToken<Long>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Create a mail label (asynchronously) Create a mail label --- Alternate route: &#x60;/v2/characters/{character_id}/mail/labels/&#x60; Alternate route:
   * &#x60;/legacy/characters/{character_id}/mail/labels/&#x60; Alternate route: &#x60;/dev/characters/{character_id}/mail/labels/&#x60;
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param label
   *          Label to create (optional)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @param callback
   *          The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException
   *           If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call postCharactersCharacterIdMailLabelsAsync(
                                                                           Integer characterId,
                                                                           PostCharactersCharacterIdMailLabelsLabel label,
                                                                           String datasource,
                                                                           final ApiCallback<Long> callback)
    throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(
                           long bytesRead,
                           long contentLength,
                           boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(
                                      long bytesWritten,
                                      long contentLength,
                                      boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = postCharactersCharacterIdMailLabelsCall(characterId, label, datasource, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<Long>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /* Build call for putCharactersCharacterIdMailMailId */
  private com.squareup.okhttp.Call putCharactersCharacterIdMailMailIdCall(
                                                                          Integer characterId,
                                                                          Integer mailId,
                                                                          PutCharactersCharacterIdMailMailIdContents contents,
                                                                          String datasource,
                                                                          final ProgressResponseBody.ProgressListener progressListener,
                                                                          final ProgressRequestBody.ProgressRequestListener progressRequestListener)
    throws ApiException {
    Object localVarPostBody = contents;

    // verify the required parameter 'characterId' is set
    if (characterId == null) { throw new ApiException("Missing the required parameter 'characterId' when calling putCharactersCharacterIdMailMailId(Async)"); }

    // verify the required parameter 'mailId' is set
    if (mailId == null) { throw new ApiException("Missing the required parameter 'mailId' when calling putCharactersCharacterIdMailMailId(Async)"); }

    // verify the required parameter 'contents' is set
    if (contents == null) { throw new ApiException("Missing the required parameter 'contents' when calling putCharactersCharacterIdMailMailId(Async)"); }

    // create path and map variables
    String localVarPath = "/characters/{character_id}/mail/{mail_id}/".replaceAll("\\{format\\}", "json")
        .replaceAll("\\{" + "character_id" + "\\}", apiClient.escapeString(characterId.toString()))
        .replaceAll("\\{" + "mail_id" + "\\}", apiClient.escapeString(mailId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    if (datasource != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "datasource", datasource));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(
                                                      com.squareup.okhttp.Interceptor.Chain chain)
          throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
        }
      });
    }

    String[] localVarAuthNames = new String[] {
        "evesso"
    };
    return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                               progressRequestListener);
  }

  /**
   * Update metadata about a mail Update metadata about a mail --- Alternate route: &#x60;/v1/characters/{character_id}/mail/{mail_id}/&#x60; Alternate route:
   * &#x60;/legacy/characters/{character_id}/mail/{mail_id}/&#x60; Alternate route: &#x60;/dev/characters/{character_id}/mail/{mail_id}/&#x60;
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param mailId
   *          An EVE mail ID (required)
   * @param contents
   *          Data used to update the mail (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public void putCharactersCharacterIdMailMailId(
                                                 Integer characterId,
                                                 Integer mailId,
                                                 PutCharactersCharacterIdMailMailIdContents contents,
                                                 String datasource)
    throws ApiException {
    putCharactersCharacterIdMailMailIdWithHttpInfo(characterId, mailId, contents, datasource);
  }

  /**
   * Update metadata about a mail Update metadata about a mail --- Alternate route: &#x60;/v1/characters/{character_id}/mail/{mail_id}/&#x60; Alternate route:
   * &#x60;/legacy/characters/{character_id}/mail/{mail_id}/&#x60; Alternate route: &#x60;/dev/characters/{character_id}/mail/{mail_id}/&#x60;
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param mailId
   *          An EVE mail ID (required)
   * @param contents
   *          Data used to update the mail (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<Void> putCharactersCharacterIdMailMailIdWithHttpInfo(
                                                                          Integer characterId,
                                                                          Integer mailId,
                                                                          PutCharactersCharacterIdMailMailIdContents contents,
                                                                          String datasource)
    throws ApiException {
    com.squareup.okhttp.Call call = putCharactersCharacterIdMailMailIdCall(characterId, mailId, contents, datasource, null, null);
    return apiClient.execute(call);
  }

  /**
   * Update metadata about a mail (asynchronously) Update metadata about a mail --- Alternate route: &#x60;/v1/characters/{character_id}/mail/{mail_id}/&#x60;
   * Alternate route: &#x60;/legacy/characters/{character_id}/mail/{mail_id}/&#x60; Alternate route: &#x60;/dev/characters/{character_id}/mail/{mail_id}/&#x60;
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param mailId
   *          An EVE mail ID (required)
   * @param contents
   *          Data used to update the mail (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @param callback
   *          The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException
   *           If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call putCharactersCharacterIdMailMailIdAsync(
                                                                          Integer characterId,
                                                                          Integer mailId,
                                                                          PutCharactersCharacterIdMailMailIdContents contents,
                                                                          String datasource,
                                                                          final ApiCallback<Void> callback)
    throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(
                           long bytesRead,
                           long contentLength,
                           boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(
                                      long bytesWritten,
                                      long contentLength,
                                      boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = putCharactersCharacterIdMailMailIdCall(characterId, mailId, contents, datasource, progressListener,
                                                                           progressRequestListener);
    apiClient.executeAsync(call, callback);
    return call;
  }
}
