/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.6.dev12
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package enterprises.orbital.eve.esi.client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;

import enterprises.orbital.eve.esi.client.invoker.ApiCallback;
import enterprises.orbital.eve.esi.client.invoker.ApiClient;
import enterprises.orbital.eve.esi.client.invoker.ApiException;
import enterprises.orbital.eve.esi.client.invoker.ApiResponse;
import enterprises.orbital.eve.esi.client.invoker.Configuration;
import enterprises.orbital.eve.esi.client.invoker.Pair;
import enterprises.orbital.eve.esi.client.invoker.ProgressRequestBody;
import enterprises.orbital.eve.esi.client.invoker.ProgressResponseBody;
import enterprises.orbital.eve.esi.client.model.GetAlliancesAllianceIdIconsOk;
import enterprises.orbital.eve.esi.client.model.GetAlliancesAllianceIdOk;
import enterprises.orbital.eve.esi.client.model.GetAlliancesNames200Ok;

public class AllianceApi {
  private ApiClient apiClient;

  public AllianceApi() {
    this(Configuration.getDefaultApiClient());
  }

  public AllianceApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(
                           ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /* Build call for getAlliances */
  private com.squareup.okhttp.Call getAlliancesCall(
                                                    String datasource,
                                                    final ProgressResponseBody.ProgressListener progressListener,
                                                    final ProgressRequestBody.ProgressRequestListener progressRequestListener)
    throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/alliances/".replaceAll("\\{format\\}", "json");

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    if (datasource != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "datasource", datasource));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(
                                                      com.squareup.okhttp.Interceptor.Chain chain)
          throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
        }
      });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                               progressRequestListener);
  }

  /**
   * List all alliances List all active player alliances --- Alternate route: &#x60;/v1/alliances/&#x60; Alternate route: &#x60;/legacy/alliances/&#x60;
   * Alternate route: &#x60;/dev/alliances/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return List&lt;Integer&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public List<Integer> getAlliances(
                                    String datasource)
    throws ApiException {
    ApiResponse<List<Integer>> resp = getAlliancesWithHttpInfo(datasource);
    return resp.getData();
  }

  /**
   * List all alliances List all active player alliances --- Alternate route: &#x60;/v1/alliances/&#x60; Alternate route: &#x60;/legacy/alliances/&#x60;
   * Alternate route: &#x60;/dev/alliances/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return ApiResponse&lt;List&lt;Integer&gt;&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<List<Integer>> getAlliancesWithHttpInfo(
                                                             String datasource)
    throws ApiException {
    com.squareup.okhttp.Call call = getAlliancesCall(datasource, null, null);
    Type localVarReturnType = new TypeToken<List<Integer>>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * List all alliances (asynchronously) List all active player alliances --- Alternate route: &#x60;/v1/alliances/&#x60; Alternate route:
   * &#x60;/legacy/alliances/&#x60; Alternate route: &#x60;/dev/alliances/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @param callback
   *          The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException
   *           If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getAlliancesAsync(
                                                    String datasource,
                                                    final ApiCallback<List<Integer>> callback)
    throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(
                           long bytesRead,
                           long contentLength,
                           boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(
                                      long bytesWritten,
                                      long contentLength,
                                      boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getAlliancesCall(datasource, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<List<Integer>>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /* Build call for getAlliancesAllianceId */
  private com.squareup.okhttp.Call getAlliancesAllianceIdCall(
                                                              Integer allianceId,
                                                              String datasource,
                                                              final ProgressResponseBody.ProgressListener progressListener,
                                                              final ProgressRequestBody.ProgressRequestListener progressRequestListener)
    throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'allianceId' is set
    if (allianceId == null) { throw new ApiException("Missing the required parameter 'allianceId' when calling getAlliancesAllianceId(Async)"); }

    // create path and map variables
    String localVarPath = "/alliances/{alliance_id}/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "alliance_id" + "\\}",
                                                                                                    apiClient.escapeString(allianceId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    if (datasource != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "datasource", datasource));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(
                                                      com.squareup.okhttp.Interceptor.Chain chain)
          throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
        }
      });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                               progressRequestListener);
  }

  /**
   * Get alliance information Public information about an alliance --- Alternate route: &#x60;/v2/alliances/{alliance_id}/&#x60; --- This route is cached for up
   * to 3600 seconds
   * 
   * @param allianceId
   *          An Eve alliance ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return GetAlliancesAllianceIdOk
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public GetAlliancesAllianceIdOk getAlliancesAllianceId(
                                                         Integer allianceId,
                                                         String datasource)
    throws ApiException {
    ApiResponse<GetAlliancesAllianceIdOk> resp = getAlliancesAllianceIdWithHttpInfo(allianceId, datasource);
    return resp.getData();
  }

  /**
   * Get alliance information Public information about an alliance --- Alternate route: &#x60;/v2/alliances/{alliance_id}/&#x60; --- This route is cached for up
   * to 3600 seconds
   * 
   * @param allianceId
   *          An Eve alliance ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return ApiResponse&lt;GetAlliancesAllianceIdOk&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<GetAlliancesAllianceIdOk> getAlliancesAllianceIdWithHttpInfo(
                                                                                  Integer allianceId,
                                                                                  String datasource)
    throws ApiException {
    com.squareup.okhttp.Call call = getAlliancesAllianceIdCall(allianceId, datasource, null, null);
    Type localVarReturnType = new TypeToken<GetAlliancesAllianceIdOk>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get alliance information (asynchronously) Public information about an alliance --- Alternate route: &#x60;/v2/alliances/{alliance_id}/&#x60; --- This route
   * is cached for up to 3600 seconds
   * 
   * @param allianceId
   *          An Eve alliance ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @param callback
   *          The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException
   *           If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getAlliancesAllianceIdAsync(
                                                              Integer allianceId,
                                                              String datasource,
                                                              final ApiCallback<GetAlliancesAllianceIdOk> callback)
    throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(
                           long bytesRead,
                           long contentLength,
                           boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(
                                      long bytesWritten,
                                      long contentLength,
                                      boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getAlliancesAllianceIdCall(allianceId, datasource, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<GetAlliancesAllianceIdOk>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /* Build call for getAlliancesAllianceIdCorporations */
  private com.squareup.okhttp.Call getAlliancesAllianceIdCorporationsCall(
                                                                          Integer allianceId,
                                                                          String datasource,
                                                                          final ProgressResponseBody.ProgressListener progressListener,
                                                                          final ProgressRequestBody.ProgressRequestListener progressRequestListener)
    throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'allianceId' is set
    if (allianceId == null) { throw new ApiException("Missing the required parameter 'allianceId' when calling getAlliancesAllianceIdCorporations(Async)"); }

    // create path and map variables
    String localVarPath = "/alliances/{alliance_id}/corporations/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "alliance_id" + "\\}",
                                                                                                                 apiClient.escapeString(allianceId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    if (datasource != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "datasource", datasource));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(
                                                      com.squareup.okhttp.Interceptor.Chain chain)
          throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
        }
      });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                               progressRequestListener);
  }

  /**
   * List alliance&#39;s corporations List all current member corporations of an alliance --- Alternate route:
   * &#x60;/v1/alliances/{alliance_id}/corporations/&#x60; Alternate route: &#x60;/legacy/alliances/{alliance_id}/corporations/&#x60; Alternate route:
   * &#x60;/dev/alliances/{alliance_id}/corporations/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param allianceId
   *          An EVE alliance ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return List&lt;Integer&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public List<Integer> getAlliancesAllianceIdCorporations(
                                                          Integer allianceId,
                                                          String datasource)
    throws ApiException {
    ApiResponse<List<Integer>> resp = getAlliancesAllianceIdCorporationsWithHttpInfo(allianceId, datasource);
    return resp.getData();
  }

  /**
   * List alliance&#39;s corporations List all current member corporations of an alliance --- Alternate route:
   * &#x60;/v1/alliances/{alliance_id}/corporations/&#x60; Alternate route: &#x60;/legacy/alliances/{alliance_id}/corporations/&#x60; Alternate route:
   * &#x60;/dev/alliances/{alliance_id}/corporations/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param allianceId
   *          An EVE alliance ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return ApiResponse&lt;List&lt;Integer&gt;&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<List<Integer>> getAlliancesAllianceIdCorporationsWithHttpInfo(
                                                                                   Integer allianceId,
                                                                                   String datasource)
    throws ApiException {
    com.squareup.okhttp.Call call = getAlliancesAllianceIdCorporationsCall(allianceId, datasource, null, null);
    Type localVarReturnType = new TypeToken<List<Integer>>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * List alliance&#39;s corporations (asynchronously) List all current member corporations of an alliance --- Alternate route:
   * &#x60;/v1/alliances/{alliance_id}/corporations/&#x60; Alternate route: &#x60;/legacy/alliances/{alliance_id}/corporations/&#x60; Alternate route:
   * &#x60;/dev/alliances/{alliance_id}/corporations/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param allianceId
   *          An EVE alliance ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @param callback
   *          The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException
   *           If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getAlliancesAllianceIdCorporationsAsync(
                                                                          Integer allianceId,
                                                                          String datasource,
                                                                          final ApiCallback<List<Integer>> callback)
    throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(
                           long bytesRead,
                           long contentLength,
                           boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(
                                      long bytesWritten,
                                      long contentLength,
                                      boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getAlliancesAllianceIdCorporationsCall(allianceId, datasource, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<List<Integer>>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /* Build call for getAlliancesAllianceIdIcons */
  private com.squareup.okhttp.Call getAlliancesAllianceIdIconsCall(
                                                                   Integer allianceId,
                                                                   String datasource,
                                                                   final ProgressResponseBody.ProgressListener progressListener,
                                                                   final ProgressRequestBody.ProgressRequestListener progressRequestListener)
    throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'allianceId' is set
    if (allianceId == null) { throw new ApiException("Missing the required parameter 'allianceId' when calling getAlliancesAllianceIdIcons(Async)"); }

    // create path and map variables
    String localVarPath = "/alliances/{alliance_id}/icons/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "alliance_id" + "\\}",
                                                                                                          apiClient.escapeString(allianceId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    if (datasource != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "datasource", datasource));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(
                                                      com.squareup.okhttp.Interceptor.Chain chain)
          throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
        }
      });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                               progressRequestListener);
  }

  /**
   * Get alliance icon Get the icon urls for a alliance --- Alternate route: &#x60;/v1/alliances/{alliance_id}/icons/&#x60; Alternate route:
   * &#x60;/legacy/alliances/{alliance_id}/icons/&#x60; Alternate route: &#x60;/dev/alliances/{alliance_id}/icons/&#x60; --- This route is cached for up to 3600
   * seconds
   * 
   * @param allianceId
   *          An EVE alliance ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return GetAlliancesAllianceIdIconsOk
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public GetAlliancesAllianceIdIconsOk getAlliancesAllianceIdIcons(
                                                                   Integer allianceId,
                                                                   String datasource)
    throws ApiException {
    ApiResponse<GetAlliancesAllianceIdIconsOk> resp = getAlliancesAllianceIdIconsWithHttpInfo(allianceId, datasource);
    return resp.getData();
  }

  /**
   * Get alliance icon Get the icon urls for a alliance --- Alternate route: &#x60;/v1/alliances/{alliance_id}/icons/&#x60; Alternate route:
   * &#x60;/legacy/alliances/{alliance_id}/icons/&#x60; Alternate route: &#x60;/dev/alliances/{alliance_id}/icons/&#x60; --- This route is cached for up to 3600
   * seconds
   * 
   * @param allianceId
   *          An EVE alliance ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return ApiResponse&lt;GetAlliancesAllianceIdIconsOk&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<GetAlliancesAllianceIdIconsOk> getAlliancesAllianceIdIconsWithHttpInfo(
                                                                                            Integer allianceId,
                                                                                            String datasource)
    throws ApiException {
    com.squareup.okhttp.Call call = getAlliancesAllianceIdIconsCall(allianceId, datasource, null, null);
    Type localVarReturnType = new TypeToken<GetAlliancesAllianceIdIconsOk>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get alliance icon (asynchronously) Get the icon urls for a alliance --- Alternate route: &#x60;/v1/alliances/{alliance_id}/icons/&#x60; Alternate route:
   * &#x60;/legacy/alliances/{alliance_id}/icons/&#x60; Alternate route: &#x60;/dev/alliances/{alliance_id}/icons/&#x60; --- This route is cached for up to 3600
   * seconds
   * 
   * @param allianceId
   *          An EVE alliance ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @param callback
   *          The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException
   *           If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getAlliancesAllianceIdIconsAsync(
                                                                   Integer allianceId,
                                                                   String datasource,
                                                                   final ApiCallback<GetAlliancesAllianceIdIconsOk> callback)
    throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(
                           long bytesRead,
                           long contentLength,
                           boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(
                                      long bytesWritten,
                                      long contentLength,
                                      boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getAlliancesAllianceIdIconsCall(allianceId, datasource, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<GetAlliancesAllianceIdIconsOk>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /* Build call for getAlliancesNames */
  private com.squareup.okhttp.Call getAlliancesNamesCall(
                                                         List<Long> allianceIds,
                                                         String datasource,
                                                         final ProgressResponseBody.ProgressListener progressListener,
                                                         final ProgressRequestBody.ProgressRequestListener progressRequestListener)
    throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'allianceIds' is set
    if (allianceIds == null) { throw new ApiException("Missing the required parameter 'allianceIds' when calling getAlliancesNames(Async)"); }

    // create path and map variables
    String localVarPath = "/alliances/names/".replaceAll("\\{format\\}", "json");

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    if (allianceIds != null) localVarQueryParams.addAll(apiClient.parameterToPairs("csv", "alliance_ids", allianceIds));
    if (datasource != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "datasource", datasource));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(
                                                      com.squareup.okhttp.Interceptor.Chain chain)
          throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
        }
      });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                               progressRequestListener);
  }

  /**
   * Get alliance names Resolve a set of alliance IDs to alliance names --- Alternate route: &#x60;/v1/alliances/names/&#x60; Alternate route:
   * &#x60;/legacy/alliances/names/&#x60; Alternate route: &#x60;/dev/alliances/names/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param allianceIds
   *          A comma separated list of alliance IDs (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return List&lt;GetAlliancesNames200Ok&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public List<GetAlliancesNames200Ok> getAlliancesNames(
                                                        List<Long> allianceIds,
                                                        String datasource)
    throws ApiException {
    ApiResponse<List<GetAlliancesNames200Ok>> resp = getAlliancesNamesWithHttpInfo(allianceIds, datasource);
    return resp.getData();
  }

  /**
   * Get alliance names Resolve a set of alliance IDs to alliance names --- Alternate route: &#x60;/v1/alliances/names/&#x60; Alternate route:
   * &#x60;/legacy/alliances/names/&#x60; Alternate route: &#x60;/dev/alliances/names/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param allianceIds
   *          A comma separated list of alliance IDs (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return ApiResponse&lt;List&lt;GetAlliancesNames200Ok&gt;&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<List<GetAlliancesNames200Ok>> getAlliancesNamesWithHttpInfo(
                                                                                 List<Long> allianceIds,
                                                                                 String datasource)
    throws ApiException {
    com.squareup.okhttp.Call call = getAlliancesNamesCall(allianceIds, datasource, null, null);
    Type localVarReturnType = new TypeToken<List<GetAlliancesNames200Ok>>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get alliance names (asynchronously) Resolve a set of alliance IDs to alliance names --- Alternate route: &#x60;/v1/alliances/names/&#x60; Alternate route:
   * &#x60;/legacy/alliances/names/&#x60; Alternate route: &#x60;/dev/alliances/names/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param allianceIds
   *          A comma separated list of alliance IDs (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @param callback
   *          The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException
   *           If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getAlliancesNamesAsync(
                                                         List<Long> allianceIds,
                                                         String datasource,
                                                         final ApiCallback<List<GetAlliancesNames200Ok>> callback)
    throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(
                           long bytesRead,
                           long contentLength,
                           boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(
                                      long bytesWritten,
                                      long contentLength,
                                      boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getAlliancesNamesCall(allianceIds, datasource, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<List<GetAlliancesNames200Ok>>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
}
