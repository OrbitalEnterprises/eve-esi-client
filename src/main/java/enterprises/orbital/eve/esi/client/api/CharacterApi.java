/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.6.dev12
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package enterprises.orbital.eve.esi.client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;

import enterprises.orbital.eve.esi.client.invoker.ApiCallback;
import enterprises.orbital.eve.esi.client.invoker.ApiClient;
import enterprises.orbital.eve.esi.client.invoker.ApiException;
import enterprises.orbital.eve.esi.client.invoker.ApiResponse;
import enterprises.orbital.eve.esi.client.invoker.Configuration;
import enterprises.orbital.eve.esi.client.invoker.Pair;
import enterprises.orbital.eve.esi.client.invoker.ProgressRequestBody;
import enterprises.orbital.eve.esi.client.invoker.ProgressResponseBody;
import enterprises.orbital.eve.esi.client.model.GetCharactersCharacterIdCorporationhistory200Ok;
import enterprises.orbital.eve.esi.client.model.GetCharactersCharacterIdOk;
import enterprises.orbital.eve.esi.client.model.GetCharactersCharacterIdPortraitOk;
import enterprises.orbital.eve.esi.client.model.GetCharactersNames200Ok;
import enterprises.orbital.eve.esi.client.model.PostCharactersCharacterIdCspaCharacters;
import enterprises.orbital.eve.esi.client.model.PostCharactersCharacterIdCspaCreated;

public class CharacterApi {
  private ApiClient apiClient;

  public CharacterApi() {
    this(Configuration.getDefaultApiClient());
  }

  public CharacterApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(
                           ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /* Build call for getCharactersCharacterId */
  private com.squareup.okhttp.Call getCharactersCharacterIdCall(
                                                                Integer characterId,
                                                                String datasource,
                                                                final ProgressResponseBody.ProgressListener progressListener,
                                                                final ProgressRequestBody.ProgressRequestListener progressRequestListener)
    throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'characterId' is set
    if (characterId == null) { throw new ApiException("Missing the required parameter 'characterId' when calling getCharactersCharacterId(Async)"); }

    // create path and map variables
    String localVarPath = "/characters/{character_id}/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "character_id" + "\\}",
                                                                                                      apiClient.escapeString(characterId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    if (datasource != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "datasource", datasource));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(
                                                      com.squareup.okhttp.Interceptor.Chain chain)
          throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
        }
      });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                               progressRequestListener);
  }

  /**
   * Get character&#39;s public information Public information about a character --- Alternate route: &#x60;/v3/characters/{character_id}/&#x60; Alternate
   * route: &#x60;/legacy/characters/{character_id}/&#x60; Alternate route: &#x60;/dev/characters/{character_id}/&#x60; --- This route is cached for up to 3600
   * seconds
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return GetCharactersCharacterIdOk
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public GetCharactersCharacterIdOk getCharactersCharacterId(
                                                             Integer characterId,
                                                             String datasource)
    throws ApiException {
    ApiResponse<GetCharactersCharacterIdOk> resp = getCharactersCharacterIdWithHttpInfo(characterId, datasource);
    return resp.getData();
  }

  /**
   * Get character&#39;s public information Public information about a character --- Alternate route: &#x60;/v3/characters/{character_id}/&#x60; Alternate
   * route: &#x60;/legacy/characters/{character_id}/&#x60; Alternate route: &#x60;/dev/characters/{character_id}/&#x60; --- This route is cached for up to 3600
   * seconds
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return ApiResponse&lt;GetCharactersCharacterIdOk&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<GetCharactersCharacterIdOk> getCharactersCharacterIdWithHttpInfo(
                                                                                      Integer characterId,
                                                                                      String datasource)
    throws ApiException {
    com.squareup.okhttp.Call call = getCharactersCharacterIdCall(characterId, datasource, null, null);
    Type localVarReturnType = new TypeToken<GetCharactersCharacterIdOk>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get character&#39;s public information (asynchronously) Public information about a character --- Alternate route:
   * &#x60;/v3/characters/{character_id}/&#x60; Alternate route: &#x60;/legacy/characters/{character_id}/&#x60; Alternate route:
   * &#x60;/dev/characters/{character_id}/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @param callback
   *          The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException
   *           If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getCharactersCharacterIdAsync(
                                                                Integer characterId,
                                                                String datasource,
                                                                final ApiCallback<GetCharactersCharacterIdOk> callback)
    throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(
                           long bytesRead,
                           long contentLength,
                           boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(
                                      long bytesWritten,
                                      long contentLength,
                                      boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getCharactersCharacterIdCall(characterId, datasource, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<GetCharactersCharacterIdOk>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /* Build call for getCharactersCharacterIdCorporationhistory */
  private com.squareup.okhttp.Call getCharactersCharacterIdCorporationhistoryCall(
                                                                                  Integer characterId,
                                                                                  String datasource,
                                                                                  final ProgressResponseBody.ProgressListener progressListener,
                                                                                  final ProgressRequestBody.ProgressRequestListener progressRequestListener)
    throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'characterId' is set
    if (characterId == null) { throw new ApiException(
        "Missing the required parameter 'characterId' when calling getCharactersCharacterIdCorporationhistory(Async)"); }

    // create path and map variables
    String localVarPath = "/characters/{character_id}/corporationhistory/".replaceAll("\\{format\\}", "json")
        .replaceAll("\\{" + "character_id" + "\\}", apiClient.escapeString(characterId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    if (datasource != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "datasource", datasource));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(
                                                      com.squareup.okhttp.Interceptor.Chain chain)
          throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
        }
      });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                               progressRequestListener);
  }

  /**
   * Get corporation history Get a list of all the corporations a character has been a member of --- Alternate route:
   * &#x60;/v1/characters/{character_id}/corporationhistory/&#x60; Alternate route: &#x60;/legacy/characters/{character_id}/corporationhistory/&#x60; Alternate
   * route: &#x60;/dev/characters/{character_id}/corporationhistory/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return List&lt;GetCharactersCharacterIdCorporationhistory200Ok&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public List<GetCharactersCharacterIdCorporationhistory200Ok> getCharactersCharacterIdCorporationhistory(
                                                                                                          Integer characterId,
                                                                                                          String datasource)
    throws ApiException {
    ApiResponse<List<GetCharactersCharacterIdCorporationhistory200Ok>> resp = getCharactersCharacterIdCorporationhistoryWithHttpInfo(characterId, datasource);
    return resp.getData();
  }

  /**
   * Get corporation history Get a list of all the corporations a character has been a member of --- Alternate route:
   * &#x60;/v1/characters/{character_id}/corporationhistory/&#x60; Alternate route: &#x60;/legacy/characters/{character_id}/corporationhistory/&#x60; Alternate
   * route: &#x60;/dev/characters/{character_id}/corporationhistory/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return ApiResponse&lt;List&lt;GetCharactersCharacterIdCorporationhistory200Ok&gt;&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<List<GetCharactersCharacterIdCorporationhistory200Ok>> getCharactersCharacterIdCorporationhistoryWithHttpInfo(
                                                                                                                                   Integer characterId,
                                                                                                                                   String datasource)
    throws ApiException {
    com.squareup.okhttp.Call call = getCharactersCharacterIdCorporationhistoryCall(characterId, datasource, null, null);
    Type localVarReturnType = new TypeToken<List<GetCharactersCharacterIdCorporationhistory200Ok>>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get corporation history (asynchronously) Get a list of all the corporations a character has been a member of --- Alternate route:
   * &#x60;/v1/characters/{character_id}/corporationhistory/&#x60; Alternate route: &#x60;/legacy/characters/{character_id}/corporationhistory/&#x60; Alternate
   * route: &#x60;/dev/characters/{character_id}/corporationhistory/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @param callback
   *          The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException
   *           If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getCharactersCharacterIdCorporationhistoryAsync(
                                                                                  Integer characterId,
                                                                                  String datasource,
                                                                                  final ApiCallback<List<GetCharactersCharacterIdCorporationhistory200Ok>> callback)
    throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(
                           long bytesRead,
                           long contentLength,
                           boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(
                                      long bytesWritten,
                                      long contentLength,
                                      boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getCharactersCharacterIdCorporationhistoryCall(characterId, datasource, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<List<GetCharactersCharacterIdCorporationhistory200Ok>>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /* Build call for getCharactersCharacterIdPortrait */
  private com.squareup.okhttp.Call getCharactersCharacterIdPortraitCall(
                                                                        Integer characterId,
                                                                        String datasource,
                                                                        final ProgressResponseBody.ProgressListener progressListener,
                                                                        final ProgressRequestBody.ProgressRequestListener progressRequestListener)
    throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'characterId' is set
    if (characterId == null) { throw new ApiException("Missing the required parameter 'characterId' when calling getCharactersCharacterIdPortrait(Async)"); }

    // create path and map variables
    String localVarPath = "/characters/{character_id}/portrait/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "character_id" + "\\}",
                                                                                                               apiClient.escapeString(characterId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    if (datasource != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "datasource", datasource));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(
                                                      com.squareup.okhttp.Interceptor.Chain chain)
          throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
        }
      });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                               progressRequestListener);
  }

  /**
   * Get character portraits Get portrait urls for a character --- Alternate route: &#x60;/v2/characters/{character_id}/portrait/&#x60; Alternate route:
   * &#x60;/dev/characters/{character_id}/portrait/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return GetCharactersCharacterIdPortraitOk
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public GetCharactersCharacterIdPortraitOk getCharactersCharacterIdPortrait(
                                                                             Integer characterId,
                                                                             String datasource)
    throws ApiException {
    ApiResponse<GetCharactersCharacterIdPortraitOk> resp = getCharactersCharacterIdPortraitWithHttpInfo(characterId, datasource);
    return resp.getData();
  }

  /**
   * Get character portraits Get portrait urls for a character --- Alternate route: &#x60;/v2/characters/{character_id}/portrait/&#x60; Alternate route:
   * &#x60;/dev/characters/{character_id}/portrait/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return ApiResponse&lt;GetCharactersCharacterIdPortraitOk&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<GetCharactersCharacterIdPortraitOk> getCharactersCharacterIdPortraitWithHttpInfo(
                                                                                                      Integer characterId,
                                                                                                      String datasource)
    throws ApiException {
    com.squareup.okhttp.Call call = getCharactersCharacterIdPortraitCall(characterId, datasource, null, null);
    Type localVarReturnType = new TypeToken<GetCharactersCharacterIdPortraitOk>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get character portraits (asynchronously) Get portrait urls for a character --- Alternate route: &#x60;/v2/characters/{character_id}/portrait/&#x60;
   * Alternate route: &#x60;/dev/characters/{character_id}/portrait/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @param callback
   *          The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException
   *           If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getCharactersCharacterIdPortraitAsync(
                                                                        Integer characterId,
                                                                        String datasource,
                                                                        final ApiCallback<GetCharactersCharacterIdPortraitOk> callback)
    throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(
                           long bytesRead,
                           long contentLength,
                           boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(
                                      long bytesWritten,
                                      long contentLength,
                                      boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getCharactersCharacterIdPortraitCall(characterId, datasource, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<GetCharactersCharacterIdPortraitOk>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /* Build call for getCharactersNames */
  private com.squareup.okhttp.Call getCharactersNamesCall(
                                                          List<Long> characterIds,
                                                          String datasource,
                                                          final ProgressResponseBody.ProgressListener progressListener,
                                                          final ProgressRequestBody.ProgressRequestListener progressRequestListener)
    throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'characterIds' is set
    if (characterIds == null) { throw new ApiException("Missing the required parameter 'characterIds' when calling getCharactersNames(Async)"); }

    // create path and map variables
    String localVarPath = "/characters/names/".replaceAll("\\{format\\}", "json");

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    if (characterIds != null) localVarQueryParams.addAll(apiClient.parameterToPairs("csv", "character_ids", characterIds));
    if (datasource != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "datasource", datasource));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(
                                                      com.squareup.okhttp.Interceptor.Chain chain)
          throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
        }
      });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                               progressRequestListener);
  }

  /**
   * Get character names Resolve a set of character IDs to character names --- Alternate route: &#x60;/v1/characters/names/&#x60; Alternate route:
   * &#x60;/legacy/characters/names/&#x60; Alternate route: &#x60;/dev/characters/names/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param characterIds
   *          A comma separated list of character IDs (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return List&lt;GetCharactersNames200Ok&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public List<GetCharactersNames200Ok> getCharactersNames(
                                                          List<Long> characterIds,
                                                          String datasource)
    throws ApiException {
    ApiResponse<List<GetCharactersNames200Ok>> resp = getCharactersNamesWithHttpInfo(characterIds, datasource);
    return resp.getData();
  }

  /**
   * Get character names Resolve a set of character IDs to character names --- Alternate route: &#x60;/v1/characters/names/&#x60; Alternate route:
   * &#x60;/legacy/characters/names/&#x60; Alternate route: &#x60;/dev/characters/names/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param characterIds
   *          A comma separated list of character IDs (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return ApiResponse&lt;List&lt;GetCharactersNames200Ok&gt;&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<List<GetCharactersNames200Ok>> getCharactersNamesWithHttpInfo(
                                                                                   List<Long> characterIds,
                                                                                   String datasource)
    throws ApiException {
    com.squareup.okhttp.Call call = getCharactersNamesCall(characterIds, datasource, null, null);
    Type localVarReturnType = new TypeToken<List<GetCharactersNames200Ok>>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get character names (asynchronously) Resolve a set of character IDs to character names --- Alternate route: &#x60;/v1/characters/names/&#x60; Alternate
   * route: &#x60;/legacy/characters/names/&#x60; Alternate route: &#x60;/dev/characters/names/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param characterIds
   *          A comma separated list of character IDs (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @param callback
   *          The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException
   *           If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getCharactersNamesAsync(
                                                          List<Long> characterIds,
                                                          String datasource,
                                                          final ApiCallback<List<GetCharactersNames200Ok>> callback)
    throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(
                           long bytesRead,
                           long contentLength,
                           boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(
                                      long bytesWritten,
                                      long contentLength,
                                      boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getCharactersNamesCall(characterIds, datasource, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<List<GetCharactersNames200Ok>>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /* Build call for postCharactersCharacterIdCspa */
  private com.squareup.okhttp.Call postCharactersCharacterIdCspaCall(
                                                                     Integer characterId,
                                                                     PostCharactersCharacterIdCspaCharacters characters,
                                                                     String datasource,
                                                                     final ProgressResponseBody.ProgressListener progressListener,
                                                                     final ProgressRequestBody.ProgressRequestListener progressRequestListener)
    throws ApiException {
    Object localVarPostBody = characters;

    // verify the required parameter 'characterId' is set
    if (characterId == null) { throw new ApiException("Missing the required parameter 'characterId' when calling postCharactersCharacterIdCspa(Async)"); }

    // verify the required parameter 'characters' is set
    if (characters == null) { throw new ApiException("Missing the required parameter 'characters' when calling postCharactersCharacterIdCspa(Async)"); }

    // create path and map variables
    String localVarPath = "/characters/{character_id}/cspa/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "character_id" + "\\}",
                                                                                                           apiClient.escapeString(characterId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    if (datasource != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "datasource", datasource));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(
                                                      com.squareup.okhttp.Interceptor.Chain chain)
          throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
        }
      });
    }

    String[] localVarAuthNames = new String[] {
        "evesso"
    };
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                               progressRequestListener);
  }

  /**
   * Calculate a CSPA charge cost Takes a source character ID in the url and a set of target character ID&#39;s in the body, returns a CSPA charge cost ---
   * Alternate route: &#x60;/v3/characters/{character_id}/cspa/&#x60; Alternate route: &#x60;/legacy/characters/{character_id}/cspa/&#x60; Alternate route:
   * &#x60;/dev/characters/{character_id}/cspa/&#x60;
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param characters
   *          The target characters to calculate the charge for (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return PostCharactersCharacterIdCspaCreated
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public PostCharactersCharacterIdCspaCreated postCharactersCharacterIdCspa(
                                                                            Integer characterId,
                                                                            PostCharactersCharacterIdCspaCharacters characters,
                                                                            String datasource)
    throws ApiException {
    ApiResponse<PostCharactersCharacterIdCspaCreated> resp = postCharactersCharacterIdCspaWithHttpInfo(characterId, characters, datasource);
    return resp.getData();
  }

  /**
   * Calculate a CSPA charge cost Takes a source character ID in the url and a set of target character ID&#39;s in the body, returns a CSPA charge cost ---
   * Alternate route: &#x60;/v3/characters/{character_id}/cspa/&#x60; Alternate route: &#x60;/legacy/characters/{character_id}/cspa/&#x60; Alternate route:
   * &#x60;/dev/characters/{character_id}/cspa/&#x60;
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param characters
   *          The target characters to calculate the charge for (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return ApiResponse&lt;PostCharactersCharacterIdCspaCreated&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<PostCharactersCharacterIdCspaCreated> postCharactersCharacterIdCspaWithHttpInfo(
                                                                                                     Integer characterId,
                                                                                                     PostCharactersCharacterIdCspaCharacters characters,
                                                                                                     String datasource)
    throws ApiException {
    com.squareup.okhttp.Call call = postCharactersCharacterIdCspaCall(characterId, characters, datasource, null, null);
    Type localVarReturnType = new TypeToken<PostCharactersCharacterIdCspaCreated>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Calculate a CSPA charge cost (asynchronously) Takes a source character ID in the url and a set of target character ID&#39;s in the body, returns a CSPA
   * charge cost --- Alternate route: &#x60;/v3/characters/{character_id}/cspa/&#x60; Alternate route: &#x60;/legacy/characters/{character_id}/cspa/&#x60;
   * Alternate route: &#x60;/dev/characters/{character_id}/cspa/&#x60;
   * 
   * @param characterId
   *          An EVE character ID (required)
   * @param characters
   *          The target characters to calculate the charge for (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @param callback
   *          The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException
   *           If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call postCharactersCharacterIdCspaAsync(
                                                                     Integer characterId,
                                                                     PostCharactersCharacterIdCspaCharacters characters,
                                                                     String datasource,
                                                                     final ApiCallback<PostCharactersCharacterIdCspaCreated> callback)
    throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(
                           long bytesRead,
                           long contentLength,
                           boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(
                                      long bytesWritten,
                                      long contentLength,
                                      boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = postCharactersCharacterIdCspaCall(characterId, characters, datasource, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<PostCharactersCharacterIdCspaCreated>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
}
