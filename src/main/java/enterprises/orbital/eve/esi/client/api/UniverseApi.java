/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.6.dev12
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package enterprises.orbital.eve.esi.client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;

import enterprises.orbital.eve.esi.client.invoker.ApiCallback;
import enterprises.orbital.eve.esi.client.invoker.ApiClient;
import enterprises.orbital.eve.esi.client.invoker.ApiException;
import enterprises.orbital.eve.esi.client.invoker.ApiResponse;
import enterprises.orbital.eve.esi.client.invoker.Configuration;
import enterprises.orbital.eve.esi.client.invoker.Pair;
import enterprises.orbital.eve.esi.client.invoker.ProgressRequestBody;
import enterprises.orbital.eve.esi.client.invoker.ProgressResponseBody;
import enterprises.orbital.eve.esi.client.model.GetUniverseStationsStationIdOk;
import enterprises.orbital.eve.esi.client.model.GetUniverseStructuresStructureIdOk;
import enterprises.orbital.eve.esi.client.model.GetUniverseSystemsSystemIdOk;
import enterprises.orbital.eve.esi.client.model.GetUniverseTypesTypeIdOk;
import enterprises.orbital.eve.esi.client.model.PostUniverseNames200Ok;
import enterprises.orbital.eve.esi.client.model.PostUniverseNamesIds;

public class UniverseApi {
  private ApiClient apiClient;

  public UniverseApi() {
    this(Configuration.getDefaultApiClient());
  }

  public UniverseApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(
                           ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /* Build call for getUniverseStationsStationId */
  private com.squareup.okhttp.Call getUniverseStationsStationIdCall(
                                                                    Integer stationId,
                                                                    String datasource,
                                                                    final ProgressResponseBody.ProgressListener progressListener,
                                                                    final ProgressRequestBody.ProgressRequestListener progressRequestListener)
    throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'stationId' is set
    if (stationId == null) { throw new ApiException("Missing the required parameter 'stationId' when calling getUniverseStationsStationId(Async)"); }

    // create path and map variables
    String localVarPath = "/universe/stations/{station_id}/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "station_id" + "\\}",
                                                                                                           apiClient.escapeString(stationId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    if (datasource != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "datasource", datasource));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(
                                                      com.squareup.okhttp.Interceptor.Chain chain)
          throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
        }
      });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                               progressRequestListener);
  }

  /**
   * Get station information Public information on stations --- Alternate route: &#x60;/v1/universe/stations/{station_id}/&#x60; Alternate route:
   * &#x60;/legacy/universe/stations/{station_id}/&#x60; Alternate route: &#x60;/dev/universe/stations/{station_id}/&#x60; --- This route is cached for up to
   * 3600 seconds
   * 
   * @param stationId
   *          An Eve station ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return GetUniverseStationsStationIdOk
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public GetUniverseStationsStationIdOk getUniverseStationsStationId(
                                                                     Integer stationId,
                                                                     String datasource)
    throws ApiException {
    ApiResponse<GetUniverseStationsStationIdOk> resp = getUniverseStationsStationIdWithHttpInfo(stationId, datasource);
    return resp.getData();
  }

  /**
   * Get station information Public information on stations --- Alternate route: &#x60;/v1/universe/stations/{station_id}/&#x60; Alternate route:
   * &#x60;/legacy/universe/stations/{station_id}/&#x60; Alternate route: &#x60;/dev/universe/stations/{station_id}/&#x60; --- This route is cached for up to
   * 3600 seconds
   * 
   * @param stationId
   *          An Eve station ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return ApiResponse&lt;GetUniverseStationsStationIdOk&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<GetUniverseStationsStationIdOk> getUniverseStationsStationIdWithHttpInfo(
                                                                                              Integer stationId,
                                                                                              String datasource)
    throws ApiException {
    com.squareup.okhttp.Call call = getUniverseStationsStationIdCall(stationId, datasource, null, null);
    Type localVarReturnType = new TypeToken<GetUniverseStationsStationIdOk>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get station information (asynchronously) Public information on stations --- Alternate route: &#x60;/v1/universe/stations/{station_id}/&#x60; Alternate
   * route: &#x60;/legacy/universe/stations/{station_id}/&#x60; Alternate route: &#x60;/dev/universe/stations/{station_id}/&#x60; --- This route is cached for
   * up to 3600 seconds
   * 
   * @param stationId
   *          An Eve station ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @param callback
   *          The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException
   *           If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getUniverseStationsStationIdAsync(
                                                                    Integer stationId,
                                                                    String datasource,
                                                                    final ApiCallback<GetUniverseStationsStationIdOk> callback)
    throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(
                           long bytesRead,
                           long contentLength,
                           boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(
                                      long bytesWritten,
                                      long contentLength,
                                      boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getUniverseStationsStationIdCall(stationId, datasource, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<GetUniverseStationsStationIdOk>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /* Build call for getUniverseStructures */
  private com.squareup.okhttp.Call getUniverseStructuresCall(
                                                             String datasource,
                                                             final ProgressResponseBody.ProgressListener progressListener,
                                                             final ProgressRequestBody.ProgressRequestListener progressRequestListener)
    throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/universe/structures/".replaceAll("\\{format\\}", "json");

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    if (datasource != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "datasource", datasource));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(
                                                      com.squareup.okhttp.Interceptor.Chain chain)
          throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
        }
      });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                               progressRequestListener);
  }

  /**
   * List all public structures List all public structures --- Alternate route: &#x60;/v1/universe/structures/&#x60; Alternate route:
   * &#x60;/legacy/universe/structures/&#x60; Alternate route: &#x60;/dev/universe/structures/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return List&lt;Long&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public List<Long> getUniverseStructures(
                                          String datasource)
    throws ApiException {
    ApiResponse<List<Long>> resp = getUniverseStructuresWithHttpInfo(datasource);
    return resp.getData();
  }

  /**
   * List all public structures List all public structures --- Alternate route: &#x60;/v1/universe/structures/&#x60; Alternate route:
   * &#x60;/legacy/universe/structures/&#x60; Alternate route: &#x60;/dev/universe/structures/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return ApiResponse&lt;List&lt;Long&gt;&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<List<Long>> getUniverseStructuresWithHttpInfo(
                                                                   String datasource)
    throws ApiException {
    com.squareup.okhttp.Call call = getUniverseStructuresCall(datasource, null, null);
    Type localVarReturnType = new TypeToken<List<Long>>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * List all public structures (asynchronously) List all public structures --- Alternate route: &#x60;/v1/universe/structures/&#x60; Alternate route:
   * &#x60;/legacy/universe/structures/&#x60; Alternate route: &#x60;/dev/universe/structures/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @param callback
   *          The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException
   *           If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getUniverseStructuresAsync(
                                                             String datasource,
                                                             final ApiCallback<List<Long>> callback)
    throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(
                           long bytesRead,
                           long contentLength,
                           boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(
                                      long bytesWritten,
                                      long contentLength,
                                      boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getUniverseStructuresCall(datasource, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<List<Long>>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /* Build call for getUniverseStructuresStructureId */
  private com.squareup.okhttp.Call getUniverseStructuresStructureIdCall(
                                                                        Long structureId,
                                                                        String datasource,
                                                                        final ProgressResponseBody.ProgressListener progressListener,
                                                                        final ProgressRequestBody.ProgressRequestListener progressRequestListener)
    throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'structureId' is set
    if (structureId == null) { throw new ApiException("Missing the required parameter 'structureId' when calling getUniverseStructuresStructureId(Async)"); }

    // create path and map variables
    String localVarPath = "/universe/structures/{structure_id}/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "structure_id" + "\\}",
                                                                                                               apiClient.escapeString(structureId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    if (datasource != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "datasource", datasource));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(
                                                      com.squareup.okhttp.Interceptor.Chain chain)
          throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
        }
      });
    }

    String[] localVarAuthNames = new String[] {
        "evesso"
    };
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                               progressRequestListener);
  }

  /**
   * Get structure information Returns information on requested structure, if you are on the ACL. Otherwise, returns \&quot;Forbidden\&quot; for all inputs. ---
   * Alternate route: &#x60;/v1/universe/structures/{structure_id}/&#x60; Alternate route: &#x60;/legacy/universe/structures/{structure_id}/&#x60; Alternate
   * route: &#x60;/dev/universe/structures/{structure_id}/&#x60;
   * 
   * @param structureId
   *          An Eve structure ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return GetUniverseStructuresStructureIdOk
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public GetUniverseStructuresStructureIdOk getUniverseStructuresStructureId(
                                                                             Long structureId,
                                                                             String datasource)
    throws ApiException {
    ApiResponse<GetUniverseStructuresStructureIdOk> resp = getUniverseStructuresStructureIdWithHttpInfo(structureId, datasource);
    return resp.getData();
  }

  /**
   * Get structure information Returns information on requested structure, if you are on the ACL. Otherwise, returns \&quot;Forbidden\&quot; for all inputs. ---
   * Alternate route: &#x60;/v1/universe/structures/{structure_id}/&#x60; Alternate route: &#x60;/legacy/universe/structures/{structure_id}/&#x60; Alternate
   * route: &#x60;/dev/universe/structures/{structure_id}/&#x60;
   * 
   * @param structureId
   *          An Eve structure ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return ApiResponse&lt;GetUniverseStructuresStructureIdOk&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<GetUniverseStructuresStructureIdOk> getUniverseStructuresStructureIdWithHttpInfo(
                                                                                                      Long structureId,
                                                                                                      String datasource)
    throws ApiException {
    com.squareup.okhttp.Call call = getUniverseStructuresStructureIdCall(structureId, datasource, null, null);
    Type localVarReturnType = new TypeToken<GetUniverseStructuresStructureIdOk>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get structure information (asynchronously) Returns information on requested structure, if you are on the ACL. Otherwise, returns \&quot;Forbidden\&quot;
   * for all inputs. --- Alternate route: &#x60;/v1/universe/structures/{structure_id}/&#x60; Alternate route:
   * &#x60;/legacy/universe/structures/{structure_id}/&#x60; Alternate route: &#x60;/dev/universe/structures/{structure_id}/&#x60;
   * 
   * @param structureId
   *          An Eve structure ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @param callback
   *          The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException
   *           If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getUniverseStructuresStructureIdAsync(
                                                                        Long structureId,
                                                                        String datasource,
                                                                        final ApiCallback<GetUniverseStructuresStructureIdOk> callback)
    throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(
                           long bytesRead,
                           long contentLength,
                           boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(
                                      long bytesWritten,
                                      long contentLength,
                                      boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getUniverseStructuresStructureIdCall(structureId, datasource, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<GetUniverseStructuresStructureIdOk>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /* Build call for getUniverseSystemsSystemId */
  private com.squareup.okhttp.Call getUniverseSystemsSystemIdCall(
                                                                  Integer systemId,
                                                                  String datasource,
                                                                  final ProgressResponseBody.ProgressListener progressListener,
                                                                  final ProgressRequestBody.ProgressRequestListener progressRequestListener)
    throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'systemId' is set
    if (systemId == null) { throw new ApiException("Missing the required parameter 'systemId' when calling getUniverseSystemsSystemId(Async)"); }

    // create path and map variables
    String localVarPath = "/universe/systems/{system_id}/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "system_id" + "\\}",
                                                                                                         apiClient.escapeString(systemId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    if (datasource != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "datasource", datasource));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(
                                                      com.squareup.okhttp.Interceptor.Chain chain)
          throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
        }
      });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                               progressRequestListener);
  }

  /**
   * Get solar system information Information on solar systems --- Alternate route: &#x60;/v1/universe/systems/{system_id}/&#x60; Alternate route:
   * &#x60;/legacy/universe/systems/{system_id}/&#x60; Alternate route: &#x60;/dev/universe/systems/{system_id}/&#x60; --- This route is cached for up to 3600
   * seconds
   * 
   * @param systemId
   *          An Eve solar system ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return GetUniverseSystemsSystemIdOk
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public GetUniverseSystemsSystemIdOk getUniverseSystemsSystemId(
                                                                 Integer systemId,
                                                                 String datasource)
    throws ApiException {
    ApiResponse<GetUniverseSystemsSystemIdOk> resp = getUniverseSystemsSystemIdWithHttpInfo(systemId, datasource);
    return resp.getData();
  }

  /**
   * Get solar system information Information on solar systems --- Alternate route: &#x60;/v1/universe/systems/{system_id}/&#x60; Alternate route:
   * &#x60;/legacy/universe/systems/{system_id}/&#x60; Alternate route: &#x60;/dev/universe/systems/{system_id}/&#x60; --- This route is cached for up to 3600
   * seconds
   * 
   * @param systemId
   *          An Eve solar system ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return ApiResponse&lt;GetUniverseSystemsSystemIdOk&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<GetUniverseSystemsSystemIdOk> getUniverseSystemsSystemIdWithHttpInfo(
                                                                                          Integer systemId,
                                                                                          String datasource)
    throws ApiException {
    com.squareup.okhttp.Call call = getUniverseSystemsSystemIdCall(systemId, datasource, null, null);
    Type localVarReturnType = new TypeToken<GetUniverseSystemsSystemIdOk>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get solar system information (asynchronously) Information on solar systems --- Alternate route: &#x60;/v1/universe/systems/{system_id}/&#x60; Alternate
   * route: &#x60;/legacy/universe/systems/{system_id}/&#x60; Alternate route: &#x60;/dev/universe/systems/{system_id}/&#x60; --- This route is cached for up to
   * 3600 seconds
   * 
   * @param systemId
   *          An Eve solar system ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @param callback
   *          The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException
   *           If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getUniverseSystemsSystemIdAsync(
                                                                  Integer systemId,
                                                                  String datasource,
                                                                  final ApiCallback<GetUniverseSystemsSystemIdOk> callback)
    throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(
                           long bytesRead,
                           long contentLength,
                           boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(
                                      long bytesWritten,
                                      long contentLength,
                                      boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getUniverseSystemsSystemIdCall(systemId, datasource, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<GetUniverseSystemsSystemIdOk>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /* Build call for getUniverseTypesTypeId */
  private com.squareup.okhttp.Call getUniverseTypesTypeIdCall(
                                                              Integer typeId,
                                                              String datasource,
                                                              final ProgressResponseBody.ProgressListener progressListener,
                                                              final ProgressRequestBody.ProgressRequestListener progressRequestListener)
    throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'typeId' is set
    if (typeId == null) { throw new ApiException("Missing the required parameter 'typeId' when calling getUniverseTypesTypeId(Async)"); }

    // create path and map variables
    String localVarPath = "/universe/types/{type_id}/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "type_id" + "\\}",
                                                                                                     apiClient.escapeString(typeId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    if (datasource != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "datasource", datasource));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(
                                                      com.squareup.okhttp.Interceptor.Chain chain)
          throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
        }
      });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                               progressRequestListener);
  }

  /**
   * Get type information Get information on a type --- Alternate route: &#x60;/v1/universe/types/{type_id}/&#x60; Alternate route:
   * &#x60;/legacy/universe/types/{type_id}/&#x60; Alternate route: &#x60;/dev/universe/types/{type_id}/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param typeId
   *          An Eve item type ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return GetUniverseTypesTypeIdOk
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public GetUniverseTypesTypeIdOk getUniverseTypesTypeId(
                                                         Integer typeId,
                                                         String datasource)
    throws ApiException {
    ApiResponse<GetUniverseTypesTypeIdOk> resp = getUniverseTypesTypeIdWithHttpInfo(typeId, datasource);
    return resp.getData();
  }

  /**
   * Get type information Get information on a type --- Alternate route: &#x60;/v1/universe/types/{type_id}/&#x60; Alternate route:
   * &#x60;/legacy/universe/types/{type_id}/&#x60; Alternate route: &#x60;/dev/universe/types/{type_id}/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param typeId
   *          An Eve item type ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return ApiResponse&lt;GetUniverseTypesTypeIdOk&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<GetUniverseTypesTypeIdOk> getUniverseTypesTypeIdWithHttpInfo(
                                                                                  Integer typeId,
                                                                                  String datasource)
    throws ApiException {
    com.squareup.okhttp.Call call = getUniverseTypesTypeIdCall(typeId, datasource, null, null);
    Type localVarReturnType = new TypeToken<GetUniverseTypesTypeIdOk>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get type information (asynchronously) Get information on a type --- Alternate route: &#x60;/v1/universe/types/{type_id}/&#x60; Alternate route:
   * &#x60;/legacy/universe/types/{type_id}/&#x60; Alternate route: &#x60;/dev/universe/types/{type_id}/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param typeId
   *          An Eve item type ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @param callback
   *          The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException
   *           If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getUniverseTypesTypeIdAsync(
                                                              Integer typeId,
                                                              String datasource,
                                                              final ApiCallback<GetUniverseTypesTypeIdOk> callback)
    throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(
                           long bytesRead,
                           long contentLength,
                           boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(
                                      long bytesWritten,
                                      long contentLength,
                                      boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getUniverseTypesTypeIdCall(typeId, datasource, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<GetUniverseTypesTypeIdOk>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /* Build call for postUniverseNames */
  private com.squareup.okhttp.Call postUniverseNamesCall(
                                                         PostUniverseNamesIds ids,
                                                         String datasource,
                                                         final ProgressResponseBody.ProgressListener progressListener,
                                                         final ProgressRequestBody.ProgressRequestListener progressRequestListener)
    throws ApiException {
    Object localVarPostBody = ids;

    // verify the required parameter 'ids' is set
    if (ids == null) { throw new ApiException("Missing the required parameter 'ids' when calling postUniverseNames(Async)"); }

    // create path and map variables
    String localVarPath = "/universe/names/".replaceAll("\\{format\\}", "json");

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    if (datasource != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "datasource", datasource));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(
                                                      com.squareup.okhttp.Interceptor.Chain chain)
          throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
        }
      });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                               progressRequestListener);
  }

  /**
   * Get names and categories for a set of ID&#39;s Resolve a set of IDs to names and categories. Supported ID&#39;s for resolving are: Characters,
   * Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types. --- Alternate route: &#x60;/v1/universe/names/&#x60; Alternate route:
   * &#x60;/legacy/universe/names/&#x60;
   * 
   * @param ids
   *          The ids to resolve (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return List&lt;PostUniverseNames200Ok&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public List<PostUniverseNames200Ok> postUniverseNames(
                                                        PostUniverseNamesIds ids,
                                                        String datasource)
    throws ApiException {
    ApiResponse<List<PostUniverseNames200Ok>> resp = postUniverseNamesWithHttpInfo(ids, datasource);
    return resp.getData();
  }

  /**
   * Get names and categories for a set of ID&#39;s Resolve a set of IDs to names and categories. Supported ID&#39;s for resolving are: Characters,
   * Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types. --- Alternate route: &#x60;/v1/universe/names/&#x60; Alternate route:
   * &#x60;/legacy/universe/names/&#x60;
   * 
   * @param ids
   *          The ids to resolve (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return ApiResponse&lt;List&lt;PostUniverseNames200Ok&gt;&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<List<PostUniverseNames200Ok>> postUniverseNamesWithHttpInfo(
                                                                                 PostUniverseNamesIds ids,
                                                                                 String datasource)
    throws ApiException {
    com.squareup.okhttp.Call call = postUniverseNamesCall(ids, datasource, null, null);
    Type localVarReturnType = new TypeToken<List<PostUniverseNames200Ok>>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get names and categories for a set of ID&#39;s (asynchronously) Resolve a set of IDs to names and categories. Supported ID&#39;s for resolving are:
   * Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types. --- Alternate route: &#x60;/v1/universe/names/&#x60;
   * Alternate route: &#x60;/legacy/universe/names/&#x60;
   * 
   * @param ids
   *          The ids to resolve (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @param callback
   *          The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException
   *           If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call postUniverseNamesAsync(
                                                         PostUniverseNamesIds ids,
                                                         String datasource,
                                                         final ApiCallback<List<PostUniverseNames200Ok>> callback)
    throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(
                           long bytesRead,
                           long contentLength,
                           boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(
                                      long bytesWritten,
                                      long contentLength,
                                      boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = postUniverseNamesCall(ids, datasource, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<List<PostUniverseNames200Ok>>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
}
