/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.6.dev12
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package enterprises.orbital.eve.esi.client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;

import enterprises.orbital.eve.esi.client.invoker.ApiCallback;
import enterprises.orbital.eve.esi.client.invoker.ApiClient;
import enterprises.orbital.eve.esi.client.invoker.ApiException;
import enterprises.orbital.eve.esi.client.invoker.ApiResponse;
import enterprises.orbital.eve.esi.client.invoker.Configuration;
import enterprises.orbital.eve.esi.client.invoker.Pair;
import enterprises.orbital.eve.esi.client.invoker.ProgressRequestBody;
import enterprises.orbital.eve.esi.client.invoker.ProgressResponseBody;
import enterprises.orbital.eve.esi.client.model.GetCorporationsCorporationIdAlliancehistory200Ok;
import enterprises.orbital.eve.esi.client.model.GetCorporationsCorporationIdIconsOk;
import enterprises.orbital.eve.esi.client.model.GetCorporationsCorporationIdMembers200Ok;
import enterprises.orbital.eve.esi.client.model.GetCorporationsCorporationIdOk;
import enterprises.orbital.eve.esi.client.model.GetCorporationsCorporationIdRoles200Ok;
import enterprises.orbital.eve.esi.client.model.GetCorporationsNames200Ok;

public class CorporationApi {
  private ApiClient apiClient;

  public CorporationApi() {
    this(Configuration.getDefaultApiClient());
  }

  public CorporationApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(
                           ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /* Build call for getCorporationsCorporationId */
  private com.squareup.okhttp.Call getCorporationsCorporationIdCall(
                                                                    Integer corporationId,
                                                                    String datasource,
                                                                    final ProgressResponseBody.ProgressListener progressListener,
                                                                    final ProgressRequestBody.ProgressRequestListener progressRequestListener)
    throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'corporationId' is set
    if (corporationId == null) { throw new ApiException("Missing the required parameter 'corporationId' when calling getCorporationsCorporationId(Async)"); }

    // create path and map variables
    String localVarPath = "/corporations/{corporation_id}/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "corporation_id" + "\\}",
                                                                                                          apiClient.escapeString(corporationId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    if (datasource != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "datasource", datasource));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(
                                                      com.squareup.okhttp.Interceptor.Chain chain)
          throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
        }
      });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                               progressRequestListener);
  }

  /**
   * Get corporation information Public information about a corporation --- Alternate route: &#x60;/v2/corporations/{corporation_id}/&#x60; --- This route is
   * cached for up to 3600 seconds
   * 
   * @param corporationId
   *          An Eve corporation ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return GetCorporationsCorporationIdOk
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public GetCorporationsCorporationIdOk getCorporationsCorporationId(
                                                                     Integer corporationId,
                                                                     String datasource)
    throws ApiException {
    ApiResponse<GetCorporationsCorporationIdOk> resp = getCorporationsCorporationIdWithHttpInfo(corporationId, datasource);
    return resp.getData();
  }

  /**
   * Get corporation information Public information about a corporation --- Alternate route: &#x60;/v2/corporations/{corporation_id}/&#x60; --- This route is
   * cached for up to 3600 seconds
   * 
   * @param corporationId
   *          An Eve corporation ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return ApiResponse&lt;GetCorporationsCorporationIdOk&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<GetCorporationsCorporationIdOk> getCorporationsCorporationIdWithHttpInfo(
                                                                                              Integer corporationId,
                                                                                              String datasource)
    throws ApiException {
    com.squareup.okhttp.Call call = getCorporationsCorporationIdCall(corporationId, datasource, null, null);
    Type localVarReturnType = new TypeToken<GetCorporationsCorporationIdOk>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get corporation information (asynchronously) Public information about a corporation --- Alternate route: &#x60;/v2/corporations/{corporation_id}/&#x60; ---
   * This route is cached for up to 3600 seconds
   * 
   * @param corporationId
   *          An Eve corporation ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @param callback
   *          The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException
   *           If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getCorporationsCorporationIdAsync(
                                                                    Integer corporationId,
                                                                    String datasource,
                                                                    final ApiCallback<GetCorporationsCorporationIdOk> callback)
    throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(
                           long bytesRead,
                           long contentLength,
                           boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(
                                      long bytesWritten,
                                      long contentLength,
                                      boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getCorporationsCorporationIdCall(corporationId, datasource, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<GetCorporationsCorporationIdOk>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /* Build call for getCorporationsCorporationIdAlliancehistory */
  private com.squareup.okhttp.Call getCorporationsCorporationIdAlliancehistoryCall(
                                                                                   Integer corporationId,
                                                                                   String datasource,
                                                                                   final ProgressResponseBody.ProgressListener progressListener,
                                                                                   final ProgressRequestBody.ProgressRequestListener progressRequestListener)
    throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'corporationId' is set
    if (corporationId == null) { throw new ApiException(
        "Missing the required parameter 'corporationId' when calling getCorporationsCorporationIdAlliancehistory(Async)"); }

    // create path and map variables
    String localVarPath = "/corporations/{corporation_id}/alliancehistory/".replaceAll("\\{format\\}", "json")
        .replaceAll("\\{" + "corporation_id" + "\\}", apiClient.escapeString(corporationId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    if (datasource != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "datasource", datasource));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(
                                                      com.squareup.okhttp.Interceptor.Chain chain)
          throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
        }
      });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                               progressRequestListener);
  }

  /**
   * Get alliance history Get a list of all the alliances a corporation has been a member of --- Alternate route:
   * &#x60;/v1/corporations/{corporation_id}/alliancehistory/&#x60; Alternate route: &#x60;/legacy/corporations/{corporation_id}/alliancehistory/&#x60;
   * Alternate route: &#x60;/dev/corporations/{corporation_id}/alliancehistory/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param corporationId
   *          An EVE corporation ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return List&lt;GetCorporationsCorporationIdAlliancehistory200Ok&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public List<GetCorporationsCorporationIdAlliancehistory200Ok> getCorporationsCorporationIdAlliancehistory(
                                                                                                            Integer corporationId,
                                                                                                            String datasource)
    throws ApiException {
    ApiResponse<List<GetCorporationsCorporationIdAlliancehistory200Ok>> resp = getCorporationsCorporationIdAlliancehistoryWithHttpInfo(corporationId,
                                                                                                                                       datasource);
    return resp.getData();
  }

  /**
   * Get alliance history Get a list of all the alliances a corporation has been a member of --- Alternate route:
   * &#x60;/v1/corporations/{corporation_id}/alliancehistory/&#x60; Alternate route: &#x60;/legacy/corporations/{corporation_id}/alliancehistory/&#x60;
   * Alternate route: &#x60;/dev/corporations/{corporation_id}/alliancehistory/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param corporationId
   *          An EVE corporation ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return ApiResponse&lt;List&lt;GetCorporationsCorporationIdAlliancehistory200Ok&gt;&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<List<GetCorporationsCorporationIdAlliancehistory200Ok>> getCorporationsCorporationIdAlliancehistoryWithHttpInfo(
                                                                                                                                     Integer corporationId,
                                                                                                                                     String datasource)
    throws ApiException {
    com.squareup.okhttp.Call call = getCorporationsCorporationIdAlliancehistoryCall(corporationId, datasource, null, null);
    Type localVarReturnType = new TypeToken<List<GetCorporationsCorporationIdAlliancehistory200Ok>>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get alliance history (asynchronously) Get a list of all the alliances a corporation has been a member of --- Alternate route:
   * &#x60;/v1/corporations/{corporation_id}/alliancehistory/&#x60; Alternate route: &#x60;/legacy/corporations/{corporation_id}/alliancehistory/&#x60;
   * Alternate route: &#x60;/dev/corporations/{corporation_id}/alliancehistory/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param corporationId
   *          An EVE corporation ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @param callback
   *          The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException
   *           If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getCorporationsCorporationIdAlliancehistoryAsync(
                                                                                   Integer corporationId,
                                                                                   String datasource,
                                                                                   final ApiCallback<List<GetCorporationsCorporationIdAlliancehistory200Ok>> callback)
    throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(
                           long bytesRead,
                           long contentLength,
                           boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(
                                      long bytesWritten,
                                      long contentLength,
                                      boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getCorporationsCorporationIdAlliancehistoryCall(corporationId, datasource, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<List<GetCorporationsCorporationIdAlliancehistory200Ok>>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /* Build call for getCorporationsCorporationIdIcons */
  private com.squareup.okhttp.Call getCorporationsCorporationIdIconsCall(
                                                                         Integer corporationId,
                                                                         String datasource,
                                                                         final ProgressResponseBody.ProgressListener progressListener,
                                                                         final ProgressRequestBody.ProgressRequestListener progressRequestListener)
    throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'corporationId' is set
    if (corporationId == null) { throw new ApiException(
        "Missing the required parameter 'corporationId' when calling getCorporationsCorporationIdIcons(Async)"); }

    // create path and map variables
    String localVarPath = "/corporations/{corporation_id}/icons/".replaceAll("\\{format\\}", "json")
        .replaceAll("\\{" + "corporation_id" + "\\}", apiClient.escapeString(corporationId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    if (datasource != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "datasource", datasource));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(
                                                      com.squareup.okhttp.Interceptor.Chain chain)
          throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
        }
      });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                               progressRequestListener);
  }

  /**
   * Get corporation icon Get the icon urls for a corporation --- Alternate route: &#x60;/v1/corporations/{corporation_id}/icons/&#x60; Alternate route:
   * &#x60;/legacy/corporations/{corporation_id}/icons/&#x60; Alternate route: &#x60;/dev/corporations/{corporation_id}/icons/&#x60; --- This route is cached
   * for up to 3600 seconds
   * 
   * @param corporationId
   *          An EVE corporation ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return GetCorporationsCorporationIdIconsOk
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public GetCorporationsCorporationIdIconsOk getCorporationsCorporationIdIcons(
                                                                               Integer corporationId,
                                                                               String datasource)
    throws ApiException {
    ApiResponse<GetCorporationsCorporationIdIconsOk> resp = getCorporationsCorporationIdIconsWithHttpInfo(corporationId, datasource);
    return resp.getData();
  }

  /**
   * Get corporation icon Get the icon urls for a corporation --- Alternate route: &#x60;/v1/corporations/{corporation_id}/icons/&#x60; Alternate route:
   * &#x60;/legacy/corporations/{corporation_id}/icons/&#x60; Alternate route: &#x60;/dev/corporations/{corporation_id}/icons/&#x60; --- This route is cached
   * for up to 3600 seconds
   * 
   * @param corporationId
   *          An EVE corporation ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return ApiResponse&lt;GetCorporationsCorporationIdIconsOk&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<GetCorporationsCorporationIdIconsOk> getCorporationsCorporationIdIconsWithHttpInfo(
                                                                                                        Integer corporationId,
                                                                                                        String datasource)
    throws ApiException {
    com.squareup.okhttp.Call call = getCorporationsCorporationIdIconsCall(corporationId, datasource, null, null);
    Type localVarReturnType = new TypeToken<GetCorporationsCorporationIdIconsOk>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get corporation icon (asynchronously) Get the icon urls for a corporation --- Alternate route: &#x60;/v1/corporations/{corporation_id}/icons/&#x60;
   * Alternate route: &#x60;/legacy/corporations/{corporation_id}/icons/&#x60; Alternate route: &#x60;/dev/corporations/{corporation_id}/icons/&#x60; --- This
   * route is cached for up to 3600 seconds
   * 
   * @param corporationId
   *          An EVE corporation ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @param callback
   *          The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException
   *           If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getCorporationsCorporationIdIconsAsync(
                                                                         Integer corporationId,
                                                                         String datasource,
                                                                         final ApiCallback<GetCorporationsCorporationIdIconsOk> callback)
    throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(
                           long bytesRead,
                           long contentLength,
                           boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(
                                      long bytesWritten,
                                      long contentLength,
                                      boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getCorporationsCorporationIdIconsCall(corporationId, datasource, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<GetCorporationsCorporationIdIconsOk>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /* Build call for getCorporationsCorporationIdMembers */
  private com.squareup.okhttp.Call getCorporationsCorporationIdMembersCall(
                                                                           Integer corporationId,
                                                                           String datasource,
                                                                           final ProgressResponseBody.ProgressListener progressListener,
                                                                           final ProgressRequestBody.ProgressRequestListener progressRequestListener)
    throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'corporationId' is set
    if (corporationId == null) { throw new ApiException(
        "Missing the required parameter 'corporationId' when calling getCorporationsCorporationIdMembers(Async)"); }

    // create path and map variables
    String localVarPath = "/corporations/{corporation_id}/members/".replaceAll("\\{format\\}", "json")
        .replaceAll("\\{" + "corporation_id" + "\\}", apiClient.escapeString(corporationId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    if (datasource != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "datasource", datasource));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(
                                                      com.squareup.okhttp.Interceptor.Chain chain)
          throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
        }
      });
    }

    String[] localVarAuthNames = new String[] {
        "evesso"
    };
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                               progressRequestListener);
  }

  /**
   * Get corporation members Read the current list of members if the calling character is a member. --- Alternate route:
   * &#x60;/v2/corporations/{corporation_id}/members/&#x60; Alternate route: &#x60;/legacy/corporations/{corporation_id}/members/&#x60; Alternate route:
   * &#x60;/dev/corporations/{corporation_id}/members/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param corporationId
   *          A corporation ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return List&lt;GetCorporationsCorporationIdMembers200Ok&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public List<GetCorporationsCorporationIdMembers200Ok> getCorporationsCorporationIdMembers(
                                                                                            Integer corporationId,
                                                                                            String datasource)
    throws ApiException {
    ApiResponse<List<GetCorporationsCorporationIdMembers200Ok>> resp = getCorporationsCorporationIdMembersWithHttpInfo(corporationId, datasource);
    return resp.getData();
  }

  /**
   * Get corporation members Read the current list of members if the calling character is a member. --- Alternate route:
   * &#x60;/v2/corporations/{corporation_id}/members/&#x60; Alternate route: &#x60;/legacy/corporations/{corporation_id}/members/&#x60; Alternate route:
   * &#x60;/dev/corporations/{corporation_id}/members/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param corporationId
   *          A corporation ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return ApiResponse&lt;List&lt;GetCorporationsCorporationIdMembers200Ok&gt;&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<List<GetCorporationsCorporationIdMembers200Ok>> getCorporationsCorporationIdMembersWithHttpInfo(
                                                                                                                     Integer corporationId,
                                                                                                                     String datasource)
    throws ApiException {
    com.squareup.okhttp.Call call = getCorporationsCorporationIdMembersCall(corporationId, datasource, null, null);
    Type localVarReturnType = new TypeToken<List<GetCorporationsCorporationIdMembers200Ok>>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get corporation members (asynchronously) Read the current list of members if the calling character is a member. --- Alternate route:
   * &#x60;/v2/corporations/{corporation_id}/members/&#x60; Alternate route: &#x60;/legacy/corporations/{corporation_id}/members/&#x60; Alternate route:
   * &#x60;/dev/corporations/{corporation_id}/members/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param corporationId
   *          A corporation ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @param callback
   *          The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException
   *           If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getCorporationsCorporationIdMembersAsync(
                                                                           Integer corporationId,
                                                                           String datasource,
                                                                           final ApiCallback<List<GetCorporationsCorporationIdMembers200Ok>> callback)
    throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(
                           long bytesRead,
                           long contentLength,
                           boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(
                                      long bytesWritten,
                                      long contentLength,
                                      boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getCorporationsCorporationIdMembersCall(corporationId, datasource, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<List<GetCorporationsCorporationIdMembers200Ok>>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /* Build call for getCorporationsCorporationIdRoles */
  private com.squareup.okhttp.Call getCorporationsCorporationIdRolesCall(
                                                                         Integer corporationId,
                                                                         String datasource,
                                                                         final ProgressResponseBody.ProgressListener progressListener,
                                                                         final ProgressRequestBody.ProgressRequestListener progressRequestListener)
    throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'corporationId' is set
    if (corporationId == null) { throw new ApiException(
        "Missing the required parameter 'corporationId' when calling getCorporationsCorporationIdRoles(Async)"); }

    // create path and map variables
    String localVarPath = "/corporations/{corporation_id}/roles/".replaceAll("\\{format\\}", "json")
        .replaceAll("\\{" + "corporation_id" + "\\}", apiClient.escapeString(corporationId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    if (datasource != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "datasource", datasource));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(
                                                      com.squareup.okhttp.Interceptor.Chain chain)
          throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
        }
      });
    }

    String[] localVarAuthNames = new String[] {
        "evesso"
    };
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                               progressRequestListener);
  }

  /**
   * Get corporation member roles Return the roles of all members if the character has the personnel manager role or any grantable role. --- Alternate route:
   * &#x60;/v1/corporations/{corporation_id}/roles/&#x60; Alternate route: &#x60;/legacy/corporations/{corporation_id}/roles/&#x60; Alternate route:
   * &#x60;/dev/corporations/{corporation_id}/roles/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param corporationId
   *          A corporation ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return List&lt;GetCorporationsCorporationIdRoles200Ok&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public List<GetCorporationsCorporationIdRoles200Ok> getCorporationsCorporationIdRoles(
                                                                                        Integer corporationId,
                                                                                        String datasource)
    throws ApiException {
    ApiResponse<List<GetCorporationsCorporationIdRoles200Ok>> resp = getCorporationsCorporationIdRolesWithHttpInfo(corporationId, datasource);
    return resp.getData();
  }

  /**
   * Get corporation member roles Return the roles of all members if the character has the personnel manager role or any grantable role. --- Alternate route:
   * &#x60;/v1/corporations/{corporation_id}/roles/&#x60; Alternate route: &#x60;/legacy/corporations/{corporation_id}/roles/&#x60; Alternate route:
   * &#x60;/dev/corporations/{corporation_id}/roles/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param corporationId
   *          A corporation ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return ApiResponse&lt;List&lt;GetCorporationsCorporationIdRoles200Ok&gt;&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<List<GetCorporationsCorporationIdRoles200Ok>> getCorporationsCorporationIdRolesWithHttpInfo(
                                                                                                                 Integer corporationId,
                                                                                                                 String datasource)
    throws ApiException {
    com.squareup.okhttp.Call call = getCorporationsCorporationIdRolesCall(corporationId, datasource, null, null);
    Type localVarReturnType = new TypeToken<List<GetCorporationsCorporationIdRoles200Ok>>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get corporation member roles (asynchronously) Return the roles of all members if the character has the personnel manager role or any grantable role. ---
   * Alternate route: &#x60;/v1/corporations/{corporation_id}/roles/&#x60; Alternate route: &#x60;/legacy/corporations/{corporation_id}/roles/&#x60; Alternate
   * route: &#x60;/dev/corporations/{corporation_id}/roles/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param corporationId
   *          A corporation ID (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @param callback
   *          The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException
   *           If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getCorporationsCorporationIdRolesAsync(
                                                                         Integer corporationId,
                                                                         String datasource,
                                                                         final ApiCallback<List<GetCorporationsCorporationIdRoles200Ok>> callback)
    throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(
                           long bytesRead,
                           long contentLength,
                           boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(
                                      long bytesWritten,
                                      long contentLength,
                                      boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getCorporationsCorporationIdRolesCall(corporationId, datasource, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<List<GetCorporationsCorporationIdRoles200Ok>>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /* Build call for getCorporationsNames */
  private com.squareup.okhttp.Call getCorporationsNamesCall(
                                                            List<Long> corporationIds,
                                                            String datasource,
                                                            final ProgressResponseBody.ProgressListener progressListener,
                                                            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
    throws ApiException {
    Object localVarPostBody = null;

    // verify the required parameter 'corporationIds' is set
    if (corporationIds == null) { throw new ApiException("Missing the required parameter 'corporationIds' when calling getCorporationsNames(Async)"); }

    // create path and map variables
    String localVarPath = "/corporations/names/".replaceAll("\\{format\\}", "json");

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    if (corporationIds != null) localVarQueryParams.addAll(apiClient.parameterToPairs("csv", "corporation_ids", corporationIds));
    if (datasource != null) localVarQueryParams.addAll(apiClient.parameterToPairs("", "datasource", datasource));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(
                                                      com.squareup.okhttp.Interceptor.Chain chain)
          throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
        }
      });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                               progressRequestListener);
  }

  /**
   * Get corporation names Resolve a set of corporation IDs to corporation names --- Alternate route: &#x60;/v1/corporations/names/&#x60; Alternate route:
   * &#x60;/legacy/corporations/names/&#x60; Alternate route: &#x60;/dev/corporations/names/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param corporationIds
   *          A comma separated list of corporation IDs (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return List&lt;GetCorporationsNames200Ok&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public List<GetCorporationsNames200Ok> getCorporationsNames(
                                                              List<Long> corporationIds,
                                                              String datasource)
    throws ApiException {
    ApiResponse<List<GetCorporationsNames200Ok>> resp = getCorporationsNamesWithHttpInfo(corporationIds, datasource);
    return resp.getData();
  }

  /**
   * Get corporation names Resolve a set of corporation IDs to corporation names --- Alternate route: &#x60;/v1/corporations/names/&#x60; Alternate route:
   * &#x60;/legacy/corporations/names/&#x60; Alternate route: &#x60;/dev/corporations/names/&#x60; --- This route is cached for up to 3600 seconds
   * 
   * @param corporationIds
   *          A comma separated list of corporation IDs (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @return ApiResponse&lt;List&lt;GetCorporationsNames200Ok&gt;&gt;
   * @throws ApiException
   *           If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<List<GetCorporationsNames200Ok>> getCorporationsNamesWithHttpInfo(
                                                                                       List<Long> corporationIds,
                                                                                       String datasource)
    throws ApiException {
    com.squareup.okhttp.Call call = getCorporationsNamesCall(corporationIds, datasource, null, null);
    Type localVarReturnType = new TypeToken<List<GetCorporationsNames200Ok>>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get corporation names (asynchronously) Resolve a set of corporation IDs to corporation names --- Alternate route: &#x60;/v1/corporations/names/&#x60;
   * Alternate route: &#x60;/legacy/corporations/names/&#x60; Alternate route: &#x60;/dev/corporations/names/&#x60; --- This route is cached for up to 3600
   * seconds
   * 
   * @param corporationIds
   *          A comma separated list of corporation IDs (required)
   * @param datasource
   *          The server name you would like data from (optional, default to tranquility)
   * @param callback
   *          The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException
   *           If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getCorporationsNamesAsync(
                                                            List<Long> corporationIds,
                                                            String datasource,
                                                            final ApiCallback<List<GetCorporationsNames200Ok>> callback)
    throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(
                           long bytesRead,
                           long contentLength,
                           boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(
                                      long bytesWritten,
                                      long contentLength,
                                      boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getCorporationsNamesCall(corporationIds, datasource, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<List<GetCorporationsNames200Ok>>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
}
